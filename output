Parsed codebase for the project: 


Directory Structure:
- /
- data/
- data/cpi_argentina.csv (15684 bytes)
- data/open_positions.csv (4775 bytes)
- data/retail_dolar.csv (18109 bytes)
- data/cpi_usa.csv (22511 bytes)
- data/dolar_ccl.csv (12076 bytes)
- data/closed_trades.csv (332 bytes)
- data/dolar_mep.csv (12065 bytes)
- src/
- src/domain/
- src/domain/portfolio.py (759 bytes)
- src/application/
- src/application/transaction_service.py (4897 bytes)
- src/application/reconciliation_service.py (10407 bytes)
- src/application/report_manager.py (3580 bytes)
- src/application/reporting_service.py (3608 bytes)
- src/presentation/
- src/presentation/cli.py (8071 bytes)
- src/presentation/api.py (4656 bytes)
- src/infrastructure/
- src/infrastructure/gateways/
- src/infrastructure/gateways/data912_connector.py (2930 bytes)
- src/infrastructure/gateways/__init__.py (177 bytes)
- src/infrastructure/gateways/ambito_gateway.py (2103 bytes)
- src/infrastructure/gateways/alpha_vantage_gateway.py (2554 bytes)
- src/infrastructure/gateways/bcra_gateway.py (1382 bytes)
- src/infrastructure/persistence/
- src/infrastructure/persistence/portfolio_repository.py (1596 bytes)
- src/infrastructure/data_fetcher.py (4835 bytes)
- src/shared/
- src/shared/financial_utils.py (965 bytes)
- requirements.txt (55 bytes)
- run_cli.py (182 bytes)
- run_api.py (236 bytes)
- utils.py (1256 bytes)
- config.py (795 bytes)


Summary

- Total files: 27
- Total directories: 9
- Total text file size (including ignored): 172.96 KB
- Total tokens: 66956
- Analyzed text content size: 137.30 KB

Top largest non-ignored files:
- data/cpi_usa.csv (21.98 kB)
- data/retail_dolar.csv (17.68 kB)
- data/cpi_argentina.csv (15.32 kB)
- data/dolar_ccl.csv (11.79 kB)
- data/dolar_mep.csv (11.78 kB)
- src/application/reconciliation_service.py (10.16 kB)
- src/presentation/cli.py (7.88 kB)
- src/application/transaction_service.py (4.78 kB)
- src/infrastructure/data_fetcher.py (4.72 kB)
- data/open_positions.csv (4.66 kB)

Top largest non-ignored directories:
- data (83.55 kB)
- src (51.63 kB)
- src/application (22.08 kB)
- src/infrastructure (15.39 kB)
- src/presentation (12.44 kB)
- src/infrastructure/gateways (9.10 kB)
- src/infrastructure/persistence (1.57 kB)
- src/shared (0.96 kB)
- src/domain (0.76 kB)

Ignore summary:
During the analysis, some files were ignored:
- No of files ignored during parsing: 70
- Patterns used to ignore files: {'__pypackages__/', '*.egg-info/', 'target/', '.svn', '*.mo', '*$py.class', '.pybuilder/', '*.log', '*.manifest', '*.so', '/site', 'dist/', 'dmypy.json', 'celerybeat.pid', '.venv', '.coverage', 'db.sqlite3-journal', '*.pot', 'instance/', 'env/', 'share/python-wheels/', '.mypy_cache/', '.tox/', '.DS_Store*', '.cache', '*.pyo', '.pixi', 'lib/', 'htmlcov/', 'Thumbs.db', '.ipynb_checkpoints', '.ropeproject', 'venv/', '*.dll', '.ruff_cache/', '.vscode', 'local_settings.py', '*.cover', 'profile_default/', '.dmypy.json', 'pip-delete-this-directory.txt', 'lib64/', '.idea', '.spyproject', '.envrc', '.pytype/', '*.sage.py', 'plots/*', 'eggs/', '.pytest_cache/', 'build/', 'nosetests.xml', 'env.bak/', 'wheels/', '.eggs/', 'coverage.xml', 'db.sqlite3', '.spyderproject', '.pyre/', 'var/', '*.py.cover', 'parts/', '.cursorindexingignore', '.cursorignore', '*.bak', '.webassets-cache', '*.tmp', 'ipython_config.py', 'MANIFEST', '*.egg-info', 'sdist/', '*.pyc', '*.spec', '.coverage.*', '.hg', 'node_modules', '.nox/', '.git', '.scrapy', '.env', 'docs/_build/', '.installed.cfg', 'develop-eggs/', 'dist', '.pypirc', '*.pyd', 'bower_components', 'ENV/', '*.swp', '__pycache__', '__marimo__/', 'venv', '.pdm-python', 'pip-log.txt', '.gitignore', 'downloads/', '.pdm-build/', 'marimo/_static/', '.Python', 'env', 'build', 'cython_debug/', '*.dylib', 'cover/', '__pycache__/', '.hypothesis/', '*.py[codz]', '.abstra/', 'venv.bak/', '*.egg', '.DS_Store', 'celerybeat-schedule', 'marimo/_lsp/'}
Files:

File: data/cpi_argentina.csv
---
Content:
date,value
1944-01-31,-3.3
1944-02-29,-2.6
1944-03-31,-3.5
1944-04-30,-5.2
1944-05-31,-4.8
1944-06-30,-3.1
1944-07-31,2.6
1944-08-31,3.0
1944-09-30,3.7
1944-10-31,3.3
1944-11-30,3.3
1944-12-31,3.9
1945-01-31,11.2
1945-02-28,13.1
1945-03-31,20.7
1945-04-30,22.2
1945-05-31,23.1
1945-06-30,21.0
1945-07-31,22.5
1945-08-31,19.7
1945-09-30,20.7
1945-10-31,19.9
1945-11-30,20.2
1945-12-31,22.6
1946-01-31,21.7
1946-02-28,19.6
1946-03-31,14.5
1946-04-30,16.4
1946-05-31,15.7
1946-06-30,17.6
1946-07-31,16.5
1946-08-31,16.7
1946-09-30,16.2
1946-10-31,19.0
1946-11-30,19.3
1946-12-31,18.7
1947-01-31,10.0
1947-02-28,10.6
1947-03-31,14.0
1947-04-30,12.1
1947-05-31,12.5
1947-06-30,15.8
1947-07-31,14.3
1947-08-31,16.2
1947-09-30,16.1
1947-10-31,12.7
1947-11-30,13.3
1947-12-31,14.9
1948-01-31,14.0
1948-02-29,13.0
1948-03-31,8.4
1948-04-30,8.9
1948-05-31,11.5
1948-06-30,9.6
1948-07-31,10.5
1948-08-31,11.8
1948-09-30,16.2
1948-10-31,17.2
1948-11-30,16.4
1948-12-31,18.8
1949-01-31,21.4
1949-02-28,21.5
1949-03-31,27.5
1949-04-30,32.9
1949-05-31,33.5
1949-06-30,31.3
1949-07-31,34.0
1949-08-31,33.5
1949-09-30,30.3
1949-10-31,33.4
1949-11-30,37.4
1949-12-31,33.7
1950-01-31,30.6
1950-02-28,34.3
1950-03-31,25.8
1950-04-30,22.6
1950-05-31,24.8
1950-06-30,26.8
1950-07-31,24.6
1950-08-31,22.7
1950-09-30,25.6
1950-10-31,26.9
1950-11-30,22.7
1950-12-31,22.1
1951-01-31,23.1
1951-02-28,23.5
1951-03-31,23.8
1951-04-30,32.2
1951-05-31,35.6
1951-06-30,36.2
1951-07-31,37.2
1951-08-31,49.6
1951-09-30,41.2
1951-10-31,40.1
1951-11-30,40.9
1951-12-31,50.2
1952-01-31,57.6
1952-02-29,54.2
1952-03-31,58.3
1952-04-30,54.2
1952-05-31,45.8
1952-06-30,44.0
1952-07-31,37.1
1952-08-31,24.9
1952-09-30,31.6
1952-10-31,29.0
1952-11-30,28.9
1952-12-31,19.1
1953-01-31,13.1
1953-02-28,18.8
1953-03-31,14.9
1953-04-30,3.6
1953-05-31,0.3
1953-06-30,-1.9
1953-07-31,3.1
1953-08-31,3.6
1953-09-30,-0.4
1953-10-31,-1.8
1953-11-30,-1.4
1953-12-31,-0.7
1954-01-31,-1.4
1954-02-28,-7.0
1954-03-31,-6.4
1954-04-30,-0.3
1954-05-31,1.1
1954-06-30,2.9
1954-07-31,4.4
1954-08-31,5.0
1954-09-30,8.3
1954-10-31,11.9
1954-11-30,12.3
1954-12-31,16.0
1955-01-31,15.8
1955-02-28,16.2
1955-03-31,16.2
1955-04-30,15.4
1955-05-31,15.8
1955-06-30,14.7
1955-07-31,12.7
1955-08-31,12.3
1955-09-30,10.4
1955-10-31,7.2
1955-11-30,6.1
1955-12-31,7.5
1956-01-31,8.4
1956-02-29,7.5
1956-03-31,7.2
1956-04-30,9.4
1956-05-31,13.4
1956-06-30,17.1
1956-07-31,16.0
1956-08-31,15.0
1956-09-30,14.9
1956-10-31,16.5
1956-11-30,18.2
1956-12-31,16.7
1957-01-31,16.9
1957-02-28,18.7
1957-03-31,23.2
1957-04-30,22.2
1957-05-31,21.0
1957-06-30,21.0
1957-07-31,23.8
1957-08-31,31.1
1957-09-30,30.1
1957-10-31,29.8
1957-11-30,31.0
1957-12-31,25.6
1958-01-31,23.7
1958-02-28,24.4
1958-03-31,22.0
1958-04-30,24.0
1958-05-31,28.4
1958-06-30,29.1
1958-07-31,31.4
1958-08-31,30.5
1958-09-30,33.3
1958-10-31,35.8
1958-11-30,39.2
1958-12-31,50.7
1959-01-31,82.3
1959-02-28,96.2
1959-03-31,107.2
1959-04-30,115.0
1959-05-31,123.0
1959-06-30,127.1
1959-07-31,125.9
1959-08-31,124.0
1959-09-30,123.7
1959-10-31,118.6
1959-11-30,112.4
1959-12-31,101.6
1960-01-31,75.9
1960-02-29,62.6
1960-03-31,52.6
1960-04-30,40.8
1960-05-31,27.2
1960-06-30,19.0
1960-07-31,16.6
1960-08-31,12.9
1960-09-30,11.0
1960-10-31,11.2
1960-11-30,11.7
1960-12-31,18.5
1961-01-31,8.3
1961-02-28,8.8
1961-03-31,9.2
1961-04-30,11.8
1961-05-31,12.8
1961-06-30,14.9
1961-07-31,15.6
1961-08-31,15.9
1961-09-30,17.0
1961-10-31,16.2
1961-11-30,17.0
1961-12-31,16.4
1962-01-31,19.0
1962-02-28,19.2
1962-03-31,19.8
1962-04-30,21.0
1962-05-31,24.3
1962-06-30,24.4
1962-07-31,28.0
1962-08-31,28.7
1962-09-30,32.1
1962-10-31,34.2
1962-11-30,29.4
1962-12-31,30.7
1963-01-31,30.5
1963-02-28,29.8
1963-03-31,33.9
1963-04-30,31.7
1963-05-31,27.3
1963-06-30,26.9
1963-07-31,23.3
1963-08-31,22.2
1963-09-30,19.7
1963-10-31,21.3
1963-11-30,25.0
1963-12-31,23.8
1964-01-31,28.5
1964-02-29,26.4
1964-03-31,20.3
1964-04-30,23.0
1964-05-31,23.2
1964-06-30,23.5
1964-07-31,22.1
1964-08-31,21.0
1964-09-30,20.4
1964-10-31,21.4
1964-11-30,19.7
1964-12-31,18.1
1965-01-31,14.3
1965-02-28,20.7
1965-03-31,24.0
1965-04-30,20.7
1965-05-31,23.1
1965-06-30,26.3
1965-07-31,31.3
1965-08-31,34.9
1965-09-30,35.4
1965-10-31,33.7
1965-11-30,36.9
1965-12-31,38.2
1966-01-31,40.3
1966-02-28,36.7
1966-03-31,36.4
1966-04-30,37.8
1966-05-31,36.3
1966-06-30,32.1
1966-07-31,28.6
1966-08-31,27.3
1966-09-30,27.3
1966-10-31,28.1
1966-11-30,26.5
1966-12-31,29.9
1967-01-31,26.7
1967-02-28,26.6
1967-03-31,26.7
1967-04-30,25.6
1967-05-31,25.5
1967-06-30,29.8
1967-07-31,34.2
1967-08-31,33.1
1967-09-30,31.7
1967-10-31,31.3
1967-11-30,31.3
1967-12-31,27.4
1968-01-31,29.0
1968-02-29,27.6
1968-03-31,24.0
1968-04-30,22.0
1968-05-31,21.0
1968-06-30,16.3
1968-07-31,10.8
1968-08-31,10.6
1968-09-30,11.6
1968-10-31,10.6
1968-11-30,8.5
1968-12-31,9.6
1969-01-31,8.2
1969-02-28,5.7
1969-03-31,7.6
1969-04-30,8.2
1969-05-31,6.6
1969-06-30,7.3
1969-07-31,8.7
1969-08-31,7.8
1969-09-30,8.3
1969-10-31,7.8
1969-11-30,8.2
1969-12-31,6.7
1970-01-31,6.5
1970-02-28,9.5
1970-03-31,9.6
1970-04-30,10.4
1970-05-31,12.7
1970-06-30,12.5
1970-07-31,12.3
1970-08-31,14.5
1970-09-30,14.7
1970-10-31,17.4
1970-11-30,19.6
1970-12-31,21.7
1971-01-31,27.4
1971-02-28,29.9
1971-03-31,29.6
1971-04-30,29.8
1971-05-31,31.9
1971-06-30,35.1
1971-07-31,39.2
1971-08-31,41.2
1971-09-30,39.6
1971-10-31,35.7
1971-11-30,35.9
1971-12-31,39.1
1972-01-31,46.8
1972-02-29,47.2
1972-03-31,51.8
1972-04-30,57.8
1972-05-31,56.5
1972-06-30,60.1
1972-07-31,61.2
1972-08-31,56.8
1972-09-30,59.2
1972-10-31,65.2
1972-11-30,68.7
1972-12-31,64.1
1973-01-31,63.2
1973-02-28,69.5
1973-03-31,76.5
1973-04-30,75.9
1973-05-31,79.1
1973-06-30,64.8
1973-07-31,56.9
1973-08-31,58.4
1973-09-30,55.4
1973-10-31,50.5
1973-11-30,44.7
1973-12-31,43.8
1974-01-31,29.6
1974-02-28,22.3
1974-03-31,14.0
1974-04-30,12.2
1974-05-31,12.1
1974-06-30,19.9
1974-07-31,22.6
1974-08-31,23.9
1974-09-30,27.4
1974-10-31,30.2
1974-11-30,34.5
1974-12-31,40.1
1975-01-31,52.9
1975-02-28,57.5
1975-03-31,68.3
1975-04-30,79.5
1975-05-31,80.5
1975-06-30,110.5
1975-07-31,177.3
1975-08-31,233.4
1975-09-30,257.7
1975-10-31,292.2
1975-11-30,310.3
1975-12-31,335.0
1976-01-31,360.4
1976-02-29,423.6
1976-03-31,566.3
1976-04-30,713.4
1976-05-31,777.6
1976-06-30,644.3
1976-07-31,475.8
1976-08-31,396.1
1976-09-30,395.0
1976-10-31,371.8
1976-11-30,367.4
1976-12-31,347.5
1977-01-31,344.0
1977-02-28,303.9
1977-03-31,215.8
1977-04-30,150.0
1977-05-31,137.5
1977-06-30,148.9
1977-07-31,156.3
1977-08-31,170.4
1977-09-30,164.9
1977-10-31,174.7
1977-11-30,177.5
1977-12-31,160.4
1978-01-31,173.3
1978-02-28,168.1
1978-03-31,172.9
1978-04-30,186.0
1978-05-31,191.9
1978-06-30,188.7
1978-07-31,186.7
1978-08-31,177.6
1978-09-30,172.7
1978-10-31,166.1
1978-11-30,165.5
1978-12-31,169.8
1979-01-31,168.4
1979-02-28,171.6
1979-03-31,167.3
1979-04-30,157.5
1979-05-31,153.3
1979-06-30,160.9
1979-07-31,162.2
1979-08-31,171.1
1979-09-30,172.3
1979-10-31,158.8
1979-11-30,150.1
1979-12-31,139.7
1980-01-31,127.9
1980-02-29,123.5
1980-03-31,119.4
1980-04-30,117.7
1980-05-31,115.4
1980-06-30,107.6
1980-07-31,102.6
1980-08-31,88.0
1980-09-30,84.0
1980-10-31,89.8
1980-11-30,88.9
1980-12-31,87.6
1981-01-31,83.6
1981-02-28,81.6
1981-03-31,81.9
1981-04-30,84.8
1981-05-31,87.9
1981-06-30,94.3
1981-07-31,104.9
1981-08-31,113.8
1981-09-30,119.1
1981-10-31,115.5
1981-11-30,120.7
1981-12-31,131.3
1982-01-31,146.8
1982-02-28,149.4
1982-03-31,146.4
1982-04-30,137.9
1982-05-31,128.0
1982-06-30,125.0
1982-07-31,137.2
1982-08-31,152.1
1982-09-30,175.4
1982-10-31,193.3
1982-11-30,204.6
1982-12-31,209.7
1983-01-31,221.0
1983-02-28,244.6
1983-03-31,266.1
1983-04-30,287.5
1983-05-31,310.0
1983-06-30,340.2
1983-07-31,325.8
1983-08-31,335.3
1983-09-30,351.3
1983-10-31,368.4
1983-11-30,401.6
1983-12-31,433.7
1984-01-31,417.9
1984-02-29,435.8
1984-03-31,479.2
1984-04-30,522.5
1984-05-31,568.2
1984-06-30,580.2
1984-07-31,615.5
1984-08-31,649.7
1984-09-30,687.8
1984-10-31,703.7
1984-11-30,675.0
1984-12-31,688.0
1985-01-31,776.2
1985-02-28,804.3
1985-03-31,851.0
1985-04-30,938.9
1985-05-31,1010.0
1985-06-30,1128.9
1985-07-31,1003.2
1985-08-31,825.7
1985-09-30,640.2
1985-10-31,532.4
1985-11-30,463.1
1985-12-31,385.4
1986-01-31,299.6
1986-02-28,236.7
1986-03-31,178.6
1986-04-30,125.3
1986-05-31,87.4
1986-06-30,50.1
1986-07-31,50.9
1986-08-31,59.3
1986-09-30,67.5
1986-10-31,74.2
1986-11-30,79.2
1986-12-31,81.9
1987-01-31,90.0
1987-02-28,98.8
1987-03-31,105.7
1987-04-30,103.0
1987-05-31,103.2
1987-06-30,110.0
1987-07-31,116.5
1987-08-31,126.4
1987-09-30,135.8
1987-10-31,165.8
1987-11-30,178.4
1987-12-31,174.8
1988-01-31,178.6
1988-02-29,189.0
1988-03-31,206.4
1988-04-30,247.6
1988-05-31,286.2
1988-06-30,321.7
1988-07-31,381.2
1988-08-31,440.0
1988-09-30,440.1
1988-10-31,392.3
1988-11-30,372.0
1988-12-31,387.7
1989-01-31,387.0
1989-02-28,383.3
1989-03-31,392.8
1989-04-30,460.6
1989-05-31,764.7
1989-06-30,1472.0
1989-07-31,3611.3
1989-08-31,3909.1
1989-09-30,3825.1
1989-10-31,3702.8
1989-11-30,3731.9
1989-12-31,4923.6
1990-01-31,8165.2
1990-02-28,12085.4
1990-03-31,20262.8
1990-04-30,16904.2
1990-05-31,10724.3
1990-06-30,5648.4
1990-07-31,2047.7
1990-08-31,1696.8
1990-09-30,1800.6
1990-10-31,1838.4
1990-11-30,1832.2
1990-12-31,1343.9
1991-01-31,767.8
1991-02-28,582.0
1991-03-31,287.3
1991-04-30,267.0
1991-05-31,232.1
1991-06-30,200.7
1991-07-31,178.3
1991-08-31,144.4
1991-09-30,115.0
1991-10-31,102.4
1991-11-30,91.3
1991-12-31,84.0
1992-01-31,76.0
1992-02-29,41.6
1992-03-31,30.2
1992-04-30,25.0
1992-05-31,22.4
1992-06-30,19.6
1992-07-31,18.6
1992-08-31,18.8
1992-09-30,18.0
1992-10-31,17.9
1992-11-30,18.0
1992-12-31,17.5
1993-01-31,15.0
1993-02-28,13.4
1993-03-31,11.9
1993-04-30,11.7
1993-05-31,12.3
1993-06-30,12.3
1993-07-31,10.7
1993-08-31,9.1
1993-09-30,8.9
1993-10-31,8.1
1993-11-30,7.7
1993-12-31,7.4
1994-01-31,6.6
1994-02-28,5.8
1994-03-31,5.2
1994-04-30,4.3
1994-05-31,3.4
1994-06-30,3.0
1994-07-31,3.6
1994-08-31,3.8
1994-09-30,3.7
1994-10-31,3.4
1994-11-30,3.6
1994-12-31,3.9
1995-01-31,5.0
1995-02-28,5.0
1995-03-31,4.4
1995-04-30,4.6
1995-05-31,4.3
1995-06-30,3.7
1995-07-31,3.2
1995-08-31,2.7
1995-09-30,2.2
1995-10-31,2.2
1995-11-30,1.7
1995-12-31,1.6
1996-01-31,0.7
1996-02-29,0.3
1996-03-31,0.2
1996-04-30,-0.2
1996-05-31,-0.3
1996-06-30,-0.1
1996-07-31,0.0
1996-08-31,0.2
1996-09-30,0.2
1996-10-31,0.4
1996-11-30,0.4
1996-12-31,0.1
1997-01-31,0.2
1997-02-28,0.9
1997-03-31,1.0
1997-04-30,0.6
1997-05-31,0.7
1997-06-30,0.9
1997-07-31,0.6
1997-08-31,0.8
1997-09-30,0.6
1997-10-31,-0.1
1997-11-30,-0.1
1997-12-31,0.3
1998-01-31,0.5
1998-02-28,0.5
1998-03-31,0.8
1998-04-30,1.2
1998-05-31,1.2
1998-06-30,1.1
1998-07-31,1.2
1998-08-31,1.1
1998-09-30,1.1
1998-10-31,0.9
1998-11-30,0.8
1998-12-31,0.7
1999-01-31,0.5
1999-02-28,0.0
1999-03-31,-0.6
1999-04-30,-0.7
1999-05-31,-1.2
1999-06-30,-1.3
1999-07-31,-1.5
1999-08-31,-1.9
1999-09-30,-2.0
1999-10-31,-1.7
1999-11-30,-1.8
1999-12-31,-1.8
2000-01-31,-1.4
2000-02-29,-1.3
2000-03-31,-1.1
2000-04-30,-1.1
2000-05-31,-1.0
2000-06-30,-1.1
2000-07-31,-0.9
2000-08-31,-0.7
2000-09-30,-0.7
2000-10-31,-0.5
2000-11-30,-0.7
2000-12-31,-0.7
2001-01-31,-1.5
2001-02-28,-1.7
2001-03-31,-1.0
2001-04-30,-0.2
2001-05-31,0.2
2001-06-30,-0.3
2001-07-31,-1.1
2001-08-31,-1.2
2001-09-30,-1.1
2001-10-31,-1.7
2001-11-30,-1.6
2001-12-31,-1.5
2002-01-31,0.6
2002-02-28,4.0
2002-03-31,7.9
2002-04-30,18.4
2002-05-31,23.0
2002-06-30,28.4
2002-07-31,32.9
2002-08-31,36.5
2002-09-30,38.5
2002-10-31,39.4
2002-11-30,40.6
2002-12-31,40.9
2003-01-31,39.6
2003-02-28,36.1
2003-03-31,31.7
2003-04-30,19.4
2003-05-31,14.3
2003-06-30,10.2
2003-07-31,7.3
2003-08-31,4.9
2003-09-30,3.5
2003-10-31,3.9
2003-11-30,3.6
2003-12-31,3.7
2004-01-31,2.7
2004-02-29,2.3
2004-03-31,2.3
2004-04-30,3.1
2004-05-31,4.2
2004-06-30,4.9
2004-07-31,4.9
2004-08-31,5.3
2004-09-30,5.9
2004-10-31,5.7
2004-11-30,5.4
2004-12-31,6.1
2005-01-31,7.2
2005-02-28,8.1
2005-03-31,9.2
2005-04-30,8.8
2005-05-31,8.6
2005-06-30,9.0
2005-07-31,9.6
2005-08-31,9.7
2005-09-30,10.3
2005-10-31,10.7
2005-11-30,12.0
2005-12-31,12.3
2006-01-31,12.1
2006-02-28,11.5
2006-03-31,11.1
2006-04-30,11.6
2006-05-31,11.5
2006-06-30,11.0
2006-07-31,10.6
2006-08-31,10.7
2006-09-30,10.4
2006-10-31,10.5
2006-11-30,10.0
2006-12-31,9.8
2007-01-31,9.7
2007-02-28,9.6
2007-03-31,9.1
2007-04-30,8.9
2007-05-31,8.8
2007-06-30,8.8
2007-07-31,8.6
2007-08-31,8.7
2007-09-30,8.6
2007-10-31,8.4
2007-11-30,8.5
2007-12-31,8.5
2008-01-31,8.2
2008-02-29,8.4
2008-03-31,8.8
2008-04-30,8.9
2008-05-31,9.1
2008-06-30,9.3
2008-07-31,9.1
2008-08-31,9.0
2008-09-30,8.7
2008-10-31,8.4
2008-11-30,7.9
2008-12-31,7.2
2009-01-31,6.8
2009-02-28,6.8
2009-03-31,6.3
2009-04-30,5.7
2009-05-31,5.5
2009-06-30,5.3
2009-07-31,5.5
2009-08-31,5.9
2009-09-30,6.2
2009-10-31,6.5
2009-11-30,7.1
2009-12-31,7.7
2010-01-31,8.2
2010-02-28,9.1
2010-03-31,9.7
2010-04-30,10.2
2010-05-31,10.7
2010-06-30,11.0
2010-07-31,11.2
2010-08-31,11.1
2010-09-30,11.1
2010-10-31,11.1
2010-11-30,11.0
2010-12-31,10.9
2011-01-31,10.6
2011-02-28,10.0
2011-03-31,9.7
2011-04-30,9.7
2011-05-31,9.7
2011-06-30,9.7
2011-07-31,9.7
2011-08-31,9.8
2011-09-30,9.9
2011-10-31,9.7
2011-11-30,9.5
2011-12-31,9.5
2012-01-31,9.7
2012-02-29,9.7
2012-03-31,9.8
2012-04-30,9.8
2012-05-31,9.9
2012-06-30,9.9
2012-07-31,9.9
2012-08-31,10.0
2012-09-30,10.0
2012-10-31,10.2
2012-11-30,10.6
2012-12-31,10.8
2013-01-31,11.1
2013-02-28,10.8
2013-03-31,10.6
2013-04-30,10.5
2013-05-31,10.3
2013-06-30,10.5
2013-07-31,10.6
2013-08-31,10.5
2013-09-30,10.5
2013-10-31,10.5
2013-11-30,10.5
2013-12-31,10.9
2014-01-31,13.6
2014-02-28,16.9
2014-03-31,19.1
2014-04-30,20.4
2014-05-31,21.2
2014-06-30,21.8
2014-07-31,22.4
2014-08-31,22.9
2014-09-30,23.6
2014-10-31,24.0
2014-11-30,24.2
2014-12-31,23.7
2015-01-31,20.7
2015-02-28,17.9
2015-03-31,16.4
2015-04-30,15.6
2015-05-31,15.2
2015-06-30,14.8
2015-07-31,14.8
2015-08-31,14.6
2015-09-30,14.4
2015-10-31,14.3
2015-11-30,15.2
2015-12-31,18.5
2016-01-31,22.0
2016-02-29,24.2
2016-03-31,26.2
2016-04-30,29.0
2016-05-31,33.1
2016-06-30,35.8
2016-07-31,36.8
2016-08-31,35.5
2016-09-30,35.5
2016-10-31,37.1
2016-11-30,36.7
2016-12-31,33.1
2017-01-31,29.9
2017-02-28,29.1
2017-03-31,28.3
2017-04-30,27.4
2017-05-31,24.0
2017-06-30,21.8
2017-07-31,21.4
2017-08-31,22.8
2017-09-30,23.8
2017-10-31,22.7
2017-11-30,22.4
2017-12-31,24.8
2018-01-31,25.0
2018-02-28,25.4
2018-03-31,25.4
2018-04-30,25.5
2018-05-31,26.3
2018-06-30,29.5
2018-07-31,31.2
2018-08-31,34.4
2018-09-30,40.5
2018-10-31,45.9
2018-11-30,48.5
2018-12-31,47.6
2019-01-31,49.3
2019-02-28,51.3
2019-03-31,54.7
2019-04-30,55.8
2019-05-31,57.3
2019-06-30,55.8
2019-07-31,54.4
2019-08-31,54.5
2019-09-30,53.5
2019-10-31,50.5
2019-11-30,52.1
2019-12-31,53.8
2020-01-31,52.9
2020-02-29,50.3
2020-03-31,48.4
2020-04-30,45.6
2020-05-31,43.4
2020-06-30,42.8
2020-07-31,42.4
2020-08-31,40.7
2020-09-30,36.6
2020-10-31,37.2
2020-11-30,35.8
2020-12-31,36.1
2021-01-31,38.5
2021-02-28,40.7
2021-03-31,42.6
2021-04-30,46.3
2021-05-31,48.8
2021-06-30,50.2
2021-07-31,51.8
2021-08-31,51.4
2021-09-30,52.5
2021-10-31,52.1
2021-11-30,51.2
2021-12-31,50.9
2022-01-31,50.7
2022-02-28,52.3
2022-03-31,55.1
2022-04-30,58.0
2022-05-31,60.7
2022-06-30,64.0
2022-07-31,71.0
2022-08-31,78.5
2022-09-30,83.0
2022-10-31,88.0
2022-11-30,92.4
2022-12-31,94.8
2023-01-31,98.8
2023-02-28,102.5
2023-03-31,104.3
2023-04-30,108.8
2023-05-31,114.2
2023-06-30,115.6
2023-07-31,113.4
2023-08-31,124.4
2023-09-30,138.3
2023-10-31,142.7
2023-11-30,160.9
2023-12-31,211.4
2024-01-31,254.2
2024-02-29,276.2
2024-03-31,287.9
2024-04-30,289.4
2024-05-31,276.4
2024-06-30,271.5
2024-07-31,263.4
2024-08-31,236.7
2024-09-30,209.0
2024-10-31,193.0
2024-11-30,166.0
2024-12-31,117.8
2025-01-31,84.5
2025-02-28,66.9
2025-03-31,55.9
2025-04-30,47.3
2025-05-31,43.5


File: data/open_positions.csv
---
Content:
purchase_date,ticker,quantity,total_cost_ars,total_cost_usd,asset_type,original_price,original_currency,underlying_asset,option_type,strike_price,expiration_date,broker_transaction_id,purchase_id
2025-03-10 00:00:00.000000,YPFD,9.0,344132.7984,279.6963526715324,ACCION,38200.0,ARS,,,,,33519490.0,
2025-03-12 00:00:00.000000,YPFD,5.0,201945.294,163.71066758542418,ACCION,40350.0,ARS,,,,,33705663.0,
2025-03-17 00:00:00.000000,YPFD,50.0,2249675.58,1731.4253455653727,ACCION,44950.0,ARS,,,,,34094944.0,
2025-06-30 00:00:00.000000,YPFD,33.0,1262646.0594,1024.1850534136904,ACCION,38225.0,ARS,,,,,50345577.0,
2025-06-30 00:00:00.000000,YPFD,75.0,2865896.505,2324.648576851634,ACCION,38175.0,ARS,,,,,50345662.0,
2025-05-22 00:00:00.000000,ECOG,9.0,267558.7464,234.01912535423156,ACCION,29700.0,ARS,,,,,43889327.0,
2025-02-19 00:00:00.000000,AUSO,144.0,512415.53856,424.8673685886274,ACCION,3555.0,ARS,,,,,31910725.0,
2025-02-19 00:00:00.000000,AUSO,40.0,143739.0048,119.18064175911648,ACCION,3590.0,ARS,,,,,31911017.0,
2025-03-27 00:00:00.000000,AUSO,110.0,334723.6992,256.997404256626,ACCION,3040.0,ARS,,,,,35406723.0,
2025-07-02 00:00:00.000000,AUSO,10.0,24173.3772,19.608037766764273,ACCION,2415.0,ARS,,,,,50667881.0,
2025-07-02 00:00:00.000000,AUSO,10.0,24073.2804,19.52684506379631,ACCION,2405.0,ARS,,,,,50668509.0,
2025-07-02 00:00:00.000000,AUSO,10.0,24173.3772,19.608037766764273,ACCION,2415.0,ARS,,,,,50669095.0,
2025-07-02 00:00:00.000000,AUSO,10.0,24223.4256,19.648634118248257,ACCION,2420.0,ARS,,,,,50670350.0,
2025-07-02 00:00:00.000000,TTS26,370541.0,400009.0094752376,324.4640457120914,RF,1.0795,ARS,,,,,50667217.0,
2025-07-02 00:00:00.000000,T17O5,344352.0,500004.10399104,405.5742511060244,RF,1.452,ARS,,,,,50667606.0,
2025-07-02 00:00:00.000000,T17O5,343053.0,500004.747497475,405.5747730810209,RF,1.4575,ARS,,,,,50669073.0,
2025-07-02 00:00:00.000000,T17O5,343760.0,500003.9199892,405.5741018544325,RF,1.4545,ARS,,,,,50670301.0,
2025-02-19 00:00:00.000000,MELI,3.0,63211.1292,52.03589943692582,CEDEAR,21050.0,ARS,,,,,31904434.0,
2025-02-19 00:00:00.000000,MELI,4.0,84081.312,69.21639830089894,CEDEAR,21000.0,ARS,,,,,31905734.0,
2025-02-19 00:00:00.000000,MELI,14.0,294985.2696,242.8341973723205,CEDEAR,21050.0,ARS,,,,,31907919.0,
2025-02-19 00:00:00.000000,MELI,20.0,421407.528,346.9059962461721,CEDEAR,21050.0,ARS,,,,,31911108.0,
2025-02-19 00:00:00.000000,MELI,10.0,210703.764,173.45299812308605,CEDEAR,21050.0,ARS,,,,,31930805.0,
2025-02-20 00:00:00.000000,MELI,2.0,41640.2688,34.183203053811106,CEDEAR,20800.0,ARS,,,,,32015994.0,
2025-07-02 00:00:00.000000,MELI,40.0,1011978.648,820.6918026405425,CEDEAR,25275.0,ARS,,,,,50667233.0,
2025-01-30 00:00:00.000000,NU,15.0,121680.6213168,102.60008374309636,CEDEAR,6.84,USD,,,,,28201745.0,
2025-01-31 00:00:00.000000,NU,50.0,409159.98396,345.0002815922831,CEDEAR,6.9,USD,,,,,28294093.0,
2025-01-31 00:00:00.000000,NU,10.0,79815.84614640001,67.30005493090046,CEDEAR,6.73,USD,,,,,28328161.0,
2025-01-31 00:00:00.000000,NU,6.0,47889.50768784001,40.38003295854027,CEDEAR,6.73,USD,,,,,28327974.0,
2025-01-31 00:00:00.000000,NU,10.0,81831.996792,69.00005631845663,CEDEAR,6.9,USD,,,,,28393804.0,
2025-02-04 00:00:00.000000,NU,12.0,94771.65024,78.94479728108756,CEDEAR,7890.0,ARS,,,,,28787058.0,
2025-02-04 00:00:00.000000,NU,5.0,39538.236,32.93535585765694,CEDEAR,7900.0,ARS,,,,,28787035.0,
2025-02-21 00:00:00.000000,NU,221.0,1526376.1032,1253.0280369412633,CEDEAR,6900.0,ARS,,,,,32138355.0,
2025-02-21 00:00:00.000000,NU,68.0,460805.62848,378.28315764068464,CEDEAR,6770.0,ARS,,,,,32215025.0,
2025-04-03 00:00:00.000000,NU,20.0,135330.8736,101.21601555663588,CEDEAR,6760.0,ARS,,,,,36598159.0,
2025-04-03 00:00:00.000000,NU,20.0,137533.0032,102.86302172693615,CEDEAR,6870.0,ARS,,,,,36611826.0,
2025-04-04 00:00:00.000000,NU,40.0,253044.7104,189.25598175086947,CEDEAR,6320.0,ARS,,,,,36893339.0,
2025-05-12 00:00:00.000000,NU,67.0,503657.06856,434.8318787857858,CEDEAR,7510.0,ARS,,,,,42325418.0,
2025-05-21 00:00:00.000000,NU,137.0,961299.63816,826.4267865887207,CEDEAR,7010.0,ARS,,,,,43652430.0,
2025-01-31 00:00:00.000000,VIST,25.0,554441.4275400001,467.5003815779489,CEDEAR,18.7,USD,,,,,28296139.0,
2025-02-19 00:00:00.000000,VIST,30.0,638867.826,525.9210263755804,CEDEAR,21275.0,ARS,,,,,31911059.0,
2025-02-19 00:00:00.000000,VIST,29.0,616846.53,507.7929220586783,CEDEAR,21250.0,ARS,,,,,31911081.0,
2025-02-19 00:00:00.000000,VIST,94.0,1990024.4808,1638.2038269287762,CEDEAR,21150.0,ARS,,,,,31933152.0,
2025-03-10 00:00:00.000000,VIST,50.0,855827.64,697.825899773324,CEDEAR,17100.0,ARS,,,,,33519818.0,
2025-04-03 00:00:00.000000,VIST,10.0,194187.792,145.23599865375266,CEDEAR,19400.0,ARS,,,,,36598558.0,
2025-07-03 11:26:33.948196,GFGC69452G,8.0,152599.96,123.53364210799545,OPCION,18999.0,ARS,,,,,,20250703112737698112


File: data/retail_dolar.csv
---
Content:
date,value
2021-05-26,99.96
2021-05-27,100.02
2021-05-28,100.04
2021-05-31,100.09
2021-06-01,100.23
2021-06-02,100.26
2021-06-03,100.26
2021-06-04,100.28
2021-06-07,100.37
2021-06-08,100.37
2021-06-09,100.36
2021-06-10,100.37
2021-06-11,100.39
2021-06-14,100.53
2021-06-15,100.67
2021-06-16,100.62
2021-06-17,100.71
2021-06-18,100.71
2021-06-22,100.69
2021-06-23,100.89
2021-06-24,100.89
2021-06-25,100.99
2021-06-28,101.1
2021-06-29,101.14
2021-06-30,101.17
2021-07-01,101.19
2021-07-02,101.19
2021-07-05,101.28
2021-07-06,101.33
2021-07-07,101.34
2021-07-08,101.35
2021-07-12,101.42
2021-07-13,101.48
2021-07-14,101.63
2021-07-15,101.64
2021-07-16,101.65
2021-07-19,101.72
2021-07-20,101.75
2021-07-21,101.76
2021-07-22,101.69
2021-07-23,101.75
2021-07-26,101.82
2021-07-27,101.95
2021-07-28,102.01
2021-07-29,101.99
2021-07-30,102.06
2021-08-02,102.12
2021-08-03,102.18
2021-08-04,102.25
2021-08-05,102.28
2021-08-06,102.3
2021-08-09,102.33
2021-08-10,102.34
2021-08-11,102.34
2021-08-12,102.36
2021-08-13,102.53
2021-08-17,102.57
2021-08-18,102.57
2021-08-19,102.61
2021-08-20,102.64
2021-08-23,102.76
2021-08-24,102.79
2021-08-25,102.79
2021-08-26,102.97
2021-08-27,102.97
2021-08-30,103.11
2021-08-31,103.14
2021-09-01,103.22
2021-09-02,103.31
2021-09-03,103.33
2021-09-06,103.45
2021-09-07,103.42
2021-09-08,103.53
2021-09-09,103.54
2021-09-10,103.56
2021-09-13,103.62
2021-09-14,103.62
2021-09-15,103.71
2021-09-16,103.58
2021-09-17,103.77
2021-09-20,104.09
2021-09-21,104.26
2021-09-22,104.1
2021-09-23,104.1
2021-09-24,104.12
2021-09-27,104.18
2021-09-28,104.19
2021-09-29,104.2
2021-09-30,104.3
2021-10-01,104.25
2021-10-04,104.34
2021-10-05,104.53
2021-10-06,104.53
2021-10-07,104.54
2021-10-12,104.47
2021-10-13,104.64
2021-10-14,104.59
2021-10-15,104.7
2021-10-18,104.79
2021-10-19,104.88
2021-10-20,104.88
2021-10-21,104.89
2021-10-22,104.94
2021-10-25,105.04
2021-10-26,105.05
2021-10-27,105.13
2021-10-28,105.15
2021-10-29,105.23
2021-11-01,105.35
2021-11-02,105.36
2021-11-03,105.38
2021-11-04,105.4
2021-11-05,105.45
2021-11-08,105.58
2021-11-09,105.63
2021-11-10,105.67
2021-11-11,105.79
2021-11-12,105.82
2021-11-15,105.88
2021-11-16,105.92
2021-11-17,105.94
2021-11-18,105.95
2021-11-19,105.96
2021-11-23,106.09
2021-11-24,106.08
2021-11-25,106.16
2021-11-26,106.17
2021-11-29,106.41
2021-11-30,106.48
2021-12-01,106.55
2021-12-02,106.6
2021-12-03,106.63
2021-12-06,106.65
2021-12-07,106.88
2021-12-09,107.26
2021-12-10,107.3
2021-12-13,107.38
2021-12-14,107.49
2021-12-15,107.51
2021-12-16,107.55
2021-12-17,107.57
2021-12-20,107.61
2021-12-21,107.73
2021-12-22,107.79
2021-12-23,107.74
2021-12-27,107.94
2021-12-28,108.14
2021-12-29,108.16
2021-12-30,108.29
2022-01-03,108.48
2022-01-04,108.61
2022-01-05,108.63
2022-01-06,108.72
2022-01-07,108.86
2022-01-10,108.96
2022-01-11,108.97
2022-01-12,109.05
2022-01-13,109.11
2022-01-14,109.21
2022-01-17,109.46
2022-01-18,109.64
2022-01-19,109.67
2022-01-20,109.71
2022-01-21,109.79
2022-01-24,110.08
2022-01-25,110.11
2022-01-26,110.15
2022-01-27,110.5
2022-01-28,110.68
2022-01-31,110.71
2022-02-01,110.75
2022-02-02,110.92
2022-02-03,110.92
2022-02-04,111.37
2022-02-07,111.46
2022-02-08,111.49
2022-02-09,111.52
2022-02-10,111.59
2022-02-11,111.67
2022-02-14,112.01
2022-02-15,112.17
2022-02-16,112.21
2022-02-17,112.24
2022-02-18,112.48
2022-02-21,112.71
2022-02-22,112.8
2022-02-23,112.83
2022-02-24,112.89
2022-02-25,112.95
2022-03-02,113.33
2022-03-03,113.48
2022-03-04,113.69
2022-03-07,113.94
2022-03-08,114.06
2022-03-09,114.37
2022-03-10,114.5
2022-03-11,114.49
2022-03-14,114.72
2022-03-15,114.82
2022-03-16,114.88
2022-03-17,114.91
2022-03-18,114.93
2022-03-21,115.35
2022-03-22,115.42
2022-03-23,115.61
2022-03-25,115.68
2022-03-28,116.19
2022-03-29,116.21
2022-03-30,116.31
2022-03-31,116.45
2022-04-01,116.64
2022-04-04,117.02
2022-04-05,117.1
2022-04-06,117.33
2022-04-07,117.65
2022-04-08,117.69
2022-04-11,118.02
2022-04-12,118.09
2022-04-13,118.39
2022-04-18,118.88
2022-04-19,119.03
2022-04-20,119.16
2022-04-21,119.58
2022-04-22,119.69
2022-04-25,119.78
2022-04-26,120.1
2022-04-27,120.13
2022-04-28,120.29
2022-04-29,120.64
2022-05-02,120.97
2022-05-03,121.33
2022-05-04,121.45
2022-05-05,121.73
2022-05-06,121.97
2022-05-09,122.16
2022-05-10,122.32
2022-05-11,122.5
2022-05-12,122.7
2022-05-13,123.11
2022-05-16,123.27
2022-05-17,123.55
2022-05-19,123.77
2022-05-20,123.91
2022-05-23,124.33
2022-05-24,124.45
2022-05-26,124.62
2022-05-27,124.81
2022-05-30,125.48
2022-05-31,125.62
2022-06-01,125.88
2022-06-02,125.95
2022-06-03,125.57
2022-06-06,126.6
2022-06-07,126.65
2022-06-08,126.77
2022-06-09,127.0
2022-06-10,127.09
2022-06-13,127.6
2022-06-14,127.62
2022-06-15,128.03
2022-06-16,128.19
2022-06-21,128.99
2022-06-22,129.01
2022-06-23,129.11
2022-06-24,129.15
2022-06-27,130.07
2022-06-28,130.14
2022-06-29,129.99
2022-06-30,130.44
2022-07-01,130.69
2022-07-04,132.07
2022-07-05,132.54
2022-07-06,132.85
2022-07-07,133.27
2022-07-08,133.89
2022-07-11,134.67
2022-07-12,134.88
2022-07-13,135.15
2022-07-14,135.21
2022-07-15,135.29
2022-07-18,135.79
2022-07-19,136.08
2022-07-20,136.1
2022-07-21,136.32
2022-07-22,136.61
2022-07-25,137.3
2022-07-26,137.38
2022-07-27,137.58
2022-07-28,137.86
2022-07-29,137.93
2022-08-01,138.9
2022-08-02,139.07
2022-08-03,139.31
2022-08-04,139.86
2022-08-05,139.87
2022-08-08,140.59
2022-08-09,140.77
2022-08-10,140.7
2022-08-11,140.98
2022-08-12,141.5
2022-08-16,142.41
2022-08-17,142.52
2022-08-18,142.39
2022-08-19,143.06
2022-08-22,144.04
2022-08-23,144.03
2022-08-24,144.29
2022-08-25,144.58
2022-08-26,144.73
2022-08-29,145.45
2022-08-30,145.62
2022-08-31,145.77
2022-09-01,145.86
2022-09-05,147.05
2022-09-06,147.35
2022-09-07,147.66
2022-09-08,148.15
2022-09-09,148.42
2022-09-12,149.43
2022-09-13,149.52
2022-09-14,149.61
2022-09-15,149.99
2022-09-16,150.17
2022-09-19,150.93
2022-09-20,151.24
2022-09-21,151.56
2022-09-22,151.64
2022-09-23,152.24
2022-09-26,153.01
2022-09-27,153.31
2022-09-28,153.61
2022-09-29,153.9
2022-09-30,154.25
2022-10-03,155.33
2022-10-04,155.67
2022-10-05,155.9
2022-10-06,156.29
2022-10-11,157.76
2022-10-12,157.96
2022-10-13,158.19
2022-10-14,158.28
2022-10-17,159.45
2022-10-18,159.71
2022-10-19,159.94
2022-10-20,160.27
2022-10-21,160.57
2022-10-24,161.56
2022-10-25,162.1
2022-10-26,162.22
2022-10-27,162.3
2022-10-28,162.59
2022-10-31,163.89
2022-11-01,164.26
2022-11-02,164.49
2022-11-03,164.82
2022-11-04,165.15
2022-11-07,166.33
2022-11-08,166.79
2022-11-09,167.17
2022-11-10,167.5
2022-11-11,167.77
2022-11-14,168.62
2022-11-15,169.18
2022-11-16,169.6
2022-11-17,169.89
2022-11-18,170.22
2022-11-22,171.52
2022-11-23,171.85
2022-11-24,172.24
2022-11-25,172.45
2022-11-28,173.66
2022-11-29,174.15
2022-11-30,174.55
2022-12-01,174.86
2022-12-02,175.42
2022-12-05,176.44
2022-12-06,176.59
2022-12-07,176.81
2022-12-12,178.57
2022-12-13,179.01
2022-12-14,179.22
2022-12-15,179.35
2022-12-16,179.69
2022-12-19,180.65
2022-12-20,180.76
2022-12-21,181.16
2022-12-22,181.36
2022-12-23,181.74
2022-12-26,182.82
2022-12-27,183.12
2022-12-28,183.51
2022-12-29,183.95
2022-12-30,184.64
2023-01-02,185.36
2023-01-03,185.99
2023-01-04,186.22
2023-01-05,186.16
2023-01-06,186.61
2023-01-09,187.72
2023-01-10,188.11
2023-01-11,188.21
2023-01-12,188.18
2023-01-13,188.53
2023-01-16,189.47
2023-01-17,189.74
2023-01-18,189.98
2023-01-19,190.19
2023-01-20,190.65
2023-01-23,191.68
2023-01-24,192.08
2023-01-25,192.26
2023-01-26,192.74
2023-01-27,193.06
2023-01-30,194.07
2023-01-31,194.36
2023-02-01,194.96
2023-02-02,195.14
2023-02-03,195.4
2023-02-06,196.52
2023-02-07,196.74
2023-02-08,196.93
2023-02-09,197.19
2023-02-10,197.6
2023-02-13,198.78
2023-02-14,199.03
2023-02-15,199.47
2023-02-16,199.7
2023-02-17,200.55
2023-02-22,201.73
2023-02-23,202.48
2023-02-24,202.88
2023-02-27,204.12
2023-02-28,204.39
2023-03-01,204.73
2023-03-02,205.37
2023-03-03,205.72
2023-03-06,206.67
2023-03-07,206.9
2023-03-08,207.22
2023-03-09,207.49
2023-03-10,207.96
2023-03-13,208.88
2023-03-14,209.36
2023-03-15,209.62
2023-03-16,210.21
2023-03-17,210.54
2023-03-20,211.85
2023-03-21,212.24
2023-03-22,212.72
2023-03-23,212.97
2023-03-27,214.45
2023-03-28,215.03
2023-03-29,215.5
2023-03-30,215.81
2023-03-31,216.24
2023-04-03,217.43
2023-04-04,218.03
2023-04-05,218.78
2023-04-10,220.73
2023-04-11,221.17
2023-04-12,221.46
2023-04-13,221.62
2023-04-14,221.77
2023-04-17,223.39
2023-04-18,223.73
2023-04-19,224.52
2023-04-20,225.21
2023-04-21,225.58
2023-04-24,226.94
2023-04-25,227.68
2023-04-26,228.43
2023-04-27,229.12
2023-04-28,229.63
2023-05-02,232.09
2023-05-03,232.88
2023-05-04,233.72
2023-05-05,235.98
2023-05-08,238.18
2023-05-09,238.89
2023-05-10,239.59
2023-05-11,239.42
2023-05-12,240.07
2023-05-15,241.39
2023-05-16,242.37
2023-05-17,242.65
2023-05-18,243.02
2023-05-19,243.59
2023-05-22,245.02
2023-05-23,245.53
2023-05-24,246.59
2023-05-29,248.68
2023-05-30,249.79
2023-05-31,250.37
2023-06-01,251.44
2023-06-02,252.0
2023-06-05,253.83
2023-06-06,254.7
2023-06-07,255.36
2023-06-08,256.09
2023-06-09,257.33
2023-06-12,258.52
2023-06-13,259.13
2023-06-14,259.85
2023-06-15,260.92
2023-06-16,261.59
2023-06-21,264.45
2023-06-22,265.31
2023-06-23,265.95
2023-06-26,267.22
2023-06-27,268.09
2023-06-28,267.88
2023-06-29,269.24
2023-06-30,270.16
2023-07-03,271.55
2023-07-04,272.06
2023-07-05,273.32
2023-07-06,273.71
2023-07-07,274.39
2023-07-10,275.81
2023-07-11,276.53
2023-07-12,276.89
2023-07-13,277.77
2023-07-14,278.47
2023-07-17,280.32
2023-07-18,280.59
2023-07-19,281.35
2023-07-20,281.66
2023-07-21,282.54
2023-07-24,284.37
2023-07-25,284.65
2023-07-26,285.2
2023-07-27,285.8
2023-07-28,286.57
2023-07-31,287.92
2023-08-01,289.17
2023-08-02,290.27
2023-08-03,291.33
2023-08-04,292.2
2023-08-07,295.25
2023-08-08,296.52
2023-08-09,297.82
2023-08-10,298.81
2023-08-11,300.01
2023-08-14,366.18
2023-08-15,366.63
2023-08-16,366.89
2023-08-17,366.55
2023-08-18,366.57
2023-08-22,367.03
2023-08-23,367.11
2023-08-24,367.37
2023-08-25,367.0
2023-08-28,367.0
2023-08-29,367.0
2023-08-30,367.09
2023-08-31,366.63
2023-09-01,367.02
2023-09-04,367.01
2023-09-05,367.01
2023-09-06,367.01
2023-09-07,367.0
2023-09-08,367.01
2023-09-11,366.72
2023-09-12,366.73
2023-09-13,366.72
2023-09-14,367.09
2023-09-15,367.01
2023-09-18,367.09
2023-09-19,366.64
2023-09-20,367.01
2023-09-21,367.09
2023-09-22,367.01
2023-09-25,366.98
2023-09-26,366.98
2023-09-27,366.64
2023-09-28,367.01
2023-09-29,365.6
2023-10-02,367.01
2023-10-03,366.65
2023-10-04,367.09
2023-10-05,366.65
2023-10-06,367.02
2023-10-09,367.18
2023-10-10,367.01
2023-10-11,367.01
2023-10-12,367.46
2023-10-17,367.59
2023-10-18,367.14
2023-10-19,367.17
2023-10-20,368.03
2023-10-23,367.91
2023-10-24,367.93
2023-10-25,367.72
2023-10-26,368.1
2023-10-27,367.93
2023-10-30,367.88
2023-10-31,367.94
2023-11-01,367.93
2023-11-02,368.05
2023-11-03,368.05
2023-11-07,367.87
2023-11-08,368.05
2023-11-09,367.93
2023-11-10,368.05
2023-11-13,367.93
2023-11-14,367.93
2023-11-15,370.51
2023-11-16,370.94
2023-11-17,371.55
2023-11-21,373.71
2023-11-22,374.33
2023-11-23,374.51
2023-11-24,375.38
2023-11-27,376.69
2023-11-28,377.55
2023-11-29,377.84
2023-11-30,378.37
2023-12-01,379.18
2023-12-04,380.37
2023-12-05,381.0
2023-12-06,381.31
2023-12-07,390.97
2023-12-11,462.4
2023-12-12,587.57
2023-12-13,832.64
2023-12-14,837.91
2023-12-15,838.18
2023-12-18,840.23
2023-12-19,841.28
2023-12-20,841.46
2023-12-21,842.68
2023-12-22,843.78
2023-12-26,843.55
2023-12-27,843.51
2023-12-28,844.66
2023-12-29,847.11
2024-01-02,851.25
2024-01-03,852.69
2024-01-04,853.15
2024-01-05,852.99
2024-01-08,857.62
2024-01-09,859.0
2024-01-10,857.87
2024-01-11,860.49
2024-01-12,860.65
2024-01-15,863.62
2024-01-16,864.65
2024-01-17,865.65
2024-01-18,866.51
2024-01-19,868.8
2024-01-22,868.15
2024-01-23,869.92
2024-01-24,870.63
2024-01-25,870.05
2024-01-26,871.96
2024-01-29,873.5
2024-01-30,875.12
2024-01-31,872.89
2024-02-01,871.93
2024-02-02,876.62
2024-02-05,876.88
2024-02-06,877.03
2024-02-07,878.13
2024-02-08,878.35
2024-02-09,877.34
2024-02-14,880.59
2024-02-15,880.57
2024-02-16,879.16
2024-02-19,882.04
2024-02-20,882.45
2024-02-21,882.79
2024-02-22,879.81
2024-02-23,883.65
2024-02-26,883.8
2024-02-27,884.03
2024-02-28,888.7
2024-02-29,887.5
2024-03-01,885.88
2024-03-04,887.61
2024-03-05,892.34
2024-03-06,889.49
2024-03-07,891.28
2024-03-08,892.0
2024-03-11,894.34
2024-03-12,894.5
2024-03-13,894.95
2024-03-14,897.33
2024-03-15,895.15
2024-03-18,896.91
2024-03-19,898.48
2024-03-20,898.22
2024-03-21,897.86
2024-03-22,898.58
2024-03-25,900.42
2024-03-26,900.45
2024-03-27,901.63
2024-04-03,905.3
2024-04-04,899.79
2024-04-05,905.3
2024-04-08,908.79
2024-04-09,907.39
2024-04-10,907.61
2024-04-11,910.82
2024-04-12,913.27
2024-04-15,912.63
2024-04-16,912.61
2024-04-17,913.23
2024-04-18,910.3
2024-04-19,912.74
2024-04-22,915.8
2024-04-23,915.4
2024-04-24,915.35
2024-04-25,916.05
2024-04-26,918.36
2024-04-29,915.62
2024-04-30,920.57
2024-05-02,918.05
2024-05-03,921.34
2024-05-06,923.56
2024-05-07,922.38
2024-05-08,923.05
2024-05-09,924.06
2024-05-10,922.24
2024-05-13,922.93
2024-05-14,926.01
2024-05-15,928.68
2024-05-16,928.45
2024-05-17,927.58
2024-05-20,927.13
2024-05-21,927.39
2024-05-22,929.52
2024-05-23,929.26
2024-05-24,931.78
2024-05-27,933.75
2024-05-28,933.13
2024-05-29,933.36
2024-05-30,934.62
2024-05-31,933.76
2024-06-03,937.66
2024-06-04,935.68
2024-06-05,938.14
2024-06-06,936.71
2024-06-07,939.07
2024-06-10,940.56
2024-06-11,938.37
2024-06-12,936.54
2024-06-13,941.61
2024-06-14,941.93
2024-06-18,943.66
2024-06-19,944.93
2024-06-24,947.74
2024-06-25,948.55
2024-06-26,947.21
2024-06-27,948.68
2024-06-28,950.42
2024-07-01,953.75
2024-07-02,953.98
2024-07-03,954.1
2024-07-04,951.95
2024-07-05,956.02
2024-07-08,958.36
2024-07-10,957.91
2024-07-11,956.91
2024-07-12,959.99
2024-07-15,958.1
2024-07-16,960.89
2024-07-17,961.92
2024-07-18,962.11
2024-07-19,963.13
2024-07-22,966.23
2024-07-23,964.39
2024-07-24,967.66
2024-07-25,968.41
2024-07-26,969.05
2024-07-29,970.8
2024-07-30,971.07
2024-07-31,970.88
2024-08-01,971.5
2024-08-02,972.41
2024-08-05,976.91
2024-08-06,977.15
2024-08-07,977.44
2024-08-08,977.03
2024-08-09,980.75
2024-08-12,981.39
2024-08-13,981.39
2024-08-14,979.34
2024-08-15,980.77
2024-08-16,982.5
2024-08-19,983.01
2024-08-20,983.03
2024-08-21,983.64
2024-08-22,984.2
2024-08-23,986.05
2024-08-26,985.24
2024-08-27,988.1
2024-08-28,988.63
2024-08-29,988.06
2024-08-30,991.42
2024-09-02,990.79
2024-09-03,991.12
2024-09-04,990.97
2024-09-05,991.8
2024-09-06,990.31
2024-09-09,993.34
2024-09-10,994.24
2024-09-11,993.41
2024-09-12,994.61
2024-09-13,995.57
2024-09-16,995.73
2024-09-17,995.63
2024-09-18,994.74
2024-09-19,997.12
2024-09-20,1000.01
2024-09-23,1000.26
2024-09-24,1000.95
2024-09-25,1003.09
2024-09-26,1003.64
2024-09-27,1004.1
2024-09-30,1004.94
2024-10-01,1005.53
2024-10-02,1006.48
2024-10-03,1006.78
2024-10-04,1006.75
2024-10-07,1008.7
2024-10-08,1009.75
2024-10-09,1009.76
2024-10-10,1011.27
2024-10-14,1011.22
2024-10-15,1012.18
2024-10-16,1011.85
2024-10-17,1012.92
2024-10-18,1014.42
2024-10-21,1018.86
2024-10-22,1015.3
2024-10-23,1015.43
2024-10-24,1015.68
2024-10-25,1018.2
2024-10-28,1018.83
2024-10-29,1019.74
2024-10-30,1020.01
2024-10-31,1020.75
2024-11-01,1022.75
2024-11-04,1022.93
2024-11-05,1023.7
2024-11-07,1026.6
2024-11-08,1025.88
2024-11-11,1026.73
2024-11-12,1028.0
2024-11-13,1028.99
2024-11-14,1029.18
2024-11-15,1030.07
2024-11-19,1030.84
2024-11-20,1031.66
2024-11-21,1033.33
2024-11-22,1034.98
2024-11-25,1037.08
2024-11-26,1037.67
2024-11-27,1036.96
2024-11-28,1037.24
2024-11-29,1040.27
2024-12-02,1041.73
2024-12-03,1042.35
2024-12-04,1042.18
2024-12-05,1043.32
2024-12-06,1044.61
2024-12-09,1045.92
2024-12-10,1047.55
2024-12-11,1047.12
2024-12-12,1048.68
2024-12-13,1048.71
2024-12-16,1049.93
2024-12-17,1049.58
2024-12-18,1050.56
2024-12-19,1051.66
2024-12-20,1054.27
2024-12-23,1055.07
2024-12-26,1055.82
2024-12-27,1057.97
2024-12-30,1060.28
2025-01-02,1061.83
2025-01-03,1062.8
2025-01-06,1064.95
2025-01-07,1068.57
2025-01-08,1065.62
2025-01-09,1065.68
2025-01-10,1066.34
2025-01-13,1067.44
2025-01-14,1068.04
2025-01-15,1068.86
2025-01-16,1069.69
2025-01-17,1069.88
2025-01-20,1071.0
2025-01-21,1071.71
2025-01-22,1072.14
2025-01-23,1074.87
2025-01-24,1075.78
2025-01-27,1076.41
2025-01-28,1077.91
2025-01-29,1078.21
2025-01-30,1078.38
2025-01-31,1079.63
2025-02-03,1080.65
2025-02-04,1082.36
2025-02-05,1084.27
2025-02-06,1084.69
2025-02-07,1085.27
2025-02-10,1086.08
2025-02-11,1086.08
2025-02-12,1086.4
2025-02-13,1086.55
2025-02-14,1087.85
2025-02-17,1088.19
2025-02-18,1088.4
2025-02-19,1087.19
2025-02-20,1088.45
2025-02-21,1089.07
2025-02-24,1089.28
2025-02-25,1089.89
2025-02-26,1090.03
2025-02-27,1091.89
2025-02-28,1093.18
2025-03-05,1093.8
2025-03-06,1091.44
2025-03-07,1095.52
2025-03-10,1096.33
2025-03-11,1096.43
2025-03-12,1098.18
2025-03-13,1097.8
2025-03-14,1098.57
2025-03-17,1098.97
2025-03-18,1099.34
2025-03-19,1099.52
2025-03-20,1099.04
2025-03-21,1099.78
2025-03-25,1101.19
2025-03-26,1101.97
2025-03-27,1102.76
2025-03-28,1103.52
2025-03-31,1103.73
2025-04-01,1104.01
2025-04-03,1104.6
2025-04-04,1103.13
2025-04-07,1105.83
2025-04-08,1106.36
2025-04-09,1105.57
2025-04-10,1106.43
2025-04-11,1107.96
2025-04-14,1233.36
2025-04-15,1233.99
2025-04-16,1179.47
2025-04-21,1114.83
2025-04-22,1125.54
2025-04-23,1174.51
2025-04-24,1196.88
2025-04-25,1193.62
2025-04-28,1192.84
2025-04-29,1194.45
2025-04-30,1193.88
2025-05-05,1216.47
2025-05-06,1220.45
2025-05-07,1152.76
2025-05-08,1138.07
2025-05-09,1166.96
2025-05-12,1155.43
2025-05-13,1150.3
2025-05-14,1153.47
2025-05-15,1155.2
2025-05-16,1167.84
2025-05-19,1157.77
2025-05-20,1162.22
2025-05-21,1166.64
2025-05-22,1161.91
2025-05-23,1157.43
2025-05-26,1163.94
2025-05-27,1174.39
2025-05-28,1180.0
2025-05-29,1199.79
2025-05-30,1209.35
2025-06-02,1199.85
2025-06-03,1203.75
2025-06-04,1199.07
2025-06-05,1206.55
2025-06-06,1205.86
2025-06-09,1201.33
2025-06-10,1202.12
2025-06-11,1200.23
2025-06-12,1202.73
2025-06-13,1201.12
2025-06-17,1189.61
2025-06-18,1160.98
2025-06-19,1180.19
2025-06-23,1188.8
2025-06-24,1192.91
2025-06-25,1203.44
2025-06-26,1209.78
2025-06-27,1204.62
2025-06-30,1217.87
2025-07-01,1237.18
2025-07-02,1248.43


File: data/cpi_usa.csv
---
Content:
date,value
1913-01-01,9.8
1913-02-01,9.8
1913-03-01,9.8
1913-04-01,9.8
1913-05-01,9.7
1913-06-01,9.8
1913-07-01,9.9
1913-08-01,9.9
1913-09-01,10.0
1913-10-01,10.0
1913-11-01,10.1
1913-12-01,10.0
1914-01-01,10.0
1914-02-01,9.9
1914-03-01,9.9
1914-04-01,9.8
1914-05-01,9.9
1914-06-01,9.9
1914-07-01,10.0
1914-08-01,10.2
1914-09-01,10.2
1914-10-01,10.1
1914-11-01,10.2
1914-12-01,10.1
1915-01-01,10.1
1915-02-01,10.0
1915-03-01,9.9
1915-04-01,10.0
1915-05-01,10.1
1915-06-01,10.1
1915-07-01,10.1
1915-08-01,10.1
1915-09-01,10.1
1915-10-01,10.2
1915-11-01,10.3
1915-12-01,10.3
1916-01-01,10.4
1916-02-01,10.4
1916-03-01,10.5
1916-04-01,10.6
1916-05-01,10.7
1916-06-01,10.8
1916-07-01,10.8
1916-08-01,10.9
1916-09-01,11.1
1916-10-01,11.3
1916-11-01,11.5
1916-12-01,11.6
1917-01-01,11.7
1917-02-01,12.0
1917-03-01,12.0
1917-04-01,12.6
1917-05-01,12.8
1917-06-01,13.0
1917-07-01,12.8
1917-08-01,13.0
1917-09-01,13.3
1917-10-01,13.5
1917-11-01,13.5
1917-12-01,13.7
1918-01-01,14.0
1918-02-01,14.1
1918-03-01,14.0
1918-04-01,14.2
1918-05-01,14.5
1918-06-01,14.7
1918-07-01,15.1
1918-08-01,15.4
1918-09-01,15.7
1918-10-01,16.0
1918-11-01,16.3
1918-12-01,16.5
1919-01-01,16.5
1919-02-01,16.2
1919-03-01,16.4
1919-04-01,16.7
1919-05-01,16.9
1919-06-01,16.9
1919-07-01,17.4
1919-08-01,17.7
1919-09-01,17.8
1919-10-01,18.1
1919-11-01,18.5
1919-12-01,18.9
1920-01-01,19.3
1920-02-01,19.5
1920-03-01,19.7
1920-04-01,20.3
1920-05-01,20.6
1920-06-01,20.9
1920-07-01,20.8
1920-08-01,20.3
1920-09-01,20.0
1920-10-01,19.9
1920-11-01,19.8
1920-12-01,19.4
1921-01-01,19.0
1921-02-01,18.4
1921-03-01,18.3
1921-04-01,18.1
1921-05-01,17.7
1921-06-01,17.6
1921-07-01,17.7
1921-08-01,17.7
1921-09-01,17.5
1921-10-01,17.5
1921-11-01,17.4
1921-12-01,17.3
1922-01-01,16.9
1922-02-01,16.9
1922-03-01,16.7
1922-04-01,16.7
1922-05-01,16.7
1922-06-01,16.7
1922-07-01,16.8
1922-08-01,16.6
1922-09-01,16.6
1922-10-01,16.7
1922-11-01,16.8
1922-12-01,16.9
1923-01-01,16.8
1923-02-01,16.8
1923-03-01,16.8
1923-04-01,16.9
1923-05-01,16.9
1923-06-01,17.0
1923-07-01,17.2
1923-08-01,17.1
1923-09-01,17.2
1923-10-01,17.3
1923-11-01,17.3
1923-12-01,17.3
1924-01-01,17.3
1924-02-01,17.2
1924-03-01,17.1
1924-04-01,17.0
1924-05-01,17.0
1924-06-01,17.0
1924-07-01,17.1
1924-08-01,17.0
1924-09-01,17.1
1924-10-01,17.2
1924-11-01,17.2
1924-12-01,17.3
1925-01-01,17.3
1925-02-01,17.2
1925-03-01,17.3
1925-04-01,17.2
1925-05-01,17.3
1925-06-01,17.5
1925-07-01,17.7
1925-08-01,17.7
1925-09-01,17.7
1925-10-01,17.7
1925-11-01,18.0
1925-12-01,17.9
1926-01-01,17.9
1926-02-01,17.9
1926-03-01,17.8
1926-04-01,17.9
1926-05-01,17.8
1926-06-01,17.7
1926-07-01,17.5
1926-08-01,17.4
1926-09-01,17.5
1926-10-01,17.6
1926-11-01,17.7
1926-12-01,17.7
1927-01-01,17.5
1927-02-01,17.4
1927-03-01,17.3
1927-04-01,17.3
1927-05-01,17.4
1927-06-01,17.6
1927-07-01,17.3
1927-08-01,17.2
1927-09-01,17.3
1927-10-01,17.4
1927-11-01,17.3
1927-12-01,17.3
1928-01-01,17.3
1928-02-01,17.1
1928-03-01,17.1
1928-04-01,17.1
1928-05-01,17.2
1928-06-01,17.1
1928-07-01,17.1
1928-08-01,17.1
1928-09-01,17.3
1928-10-01,17.2
1928-11-01,17.2
1928-12-01,17.1
1929-01-01,17.1
1929-02-01,17.1
1929-03-01,17.0
1929-04-01,16.9
1929-05-01,17.0
1929-06-01,17.1
1929-07-01,17.3
1929-08-01,17.3
1929-09-01,17.3
1929-10-01,17.3
1929-11-01,17.3
1929-12-01,17.2
1930-01-01,17.1
1930-02-01,17.0
1930-03-01,16.9
1930-04-01,17.0
1930-05-01,16.9
1930-06-01,16.8
1930-07-01,16.6
1930-08-01,16.5
1930-09-01,16.6
1930-10-01,16.5
1930-11-01,16.4
1930-12-01,16.1
1931-01-01,15.9
1931-02-01,15.7
1931-03-01,15.6
1931-04-01,15.5
1931-05-01,15.3
1931-06-01,15.1
1931-07-01,15.1
1931-08-01,15.1
1931-09-01,15.0
1931-10-01,14.9
1931-11-01,14.7
1931-12-01,14.6
1932-01-01,14.3
1932-02-01,14.1
1932-03-01,14.0
1932-04-01,13.9
1932-05-01,13.7
1932-06-01,13.6
1932-07-01,13.6
1932-08-01,13.5
1932-09-01,13.4
1932-10-01,13.3
1932-11-01,13.2
1932-12-01,13.1
1933-01-01,12.9
1933-02-01,12.7
1933-03-01,12.6
1933-04-01,12.6
1933-05-01,12.6
1933-06-01,12.7
1933-07-01,13.1
1933-08-01,13.2
1933-09-01,13.2
1933-10-01,13.2
1933-11-01,13.2
1933-12-01,13.2
1934-01-01,13.2
1934-02-01,13.3
1934-03-01,13.3
1934-04-01,13.3
1934-05-01,13.3
1934-06-01,13.4
1934-07-01,13.4
1934-08-01,13.4
1934-09-01,13.6
1934-10-01,13.5
1934-11-01,13.5
1934-12-01,13.4
1935-01-01,13.6
1935-02-01,13.7
1935-03-01,13.7
1935-04-01,13.8
1935-05-01,13.8
1935-06-01,13.7
1935-07-01,13.7
1935-08-01,13.7
1935-09-01,13.7
1935-10-01,13.7
1935-11-01,13.8
1935-12-01,13.8
1936-01-01,13.8
1936-02-01,13.8
1936-03-01,13.7
1936-04-01,13.7
1936-05-01,13.7
1936-06-01,13.8
1936-07-01,13.9
1936-08-01,14.0
1936-09-01,14.0
1936-10-01,14.0
1936-11-01,14.0
1936-12-01,14.0
1937-01-01,14.1
1937-02-01,14.1
1937-03-01,14.2
1937-04-01,14.3
1937-05-01,14.4
1937-06-01,14.4
1937-07-01,14.5
1937-08-01,14.5
1937-09-01,14.6
1937-10-01,14.6
1937-11-01,14.5
1937-12-01,14.4
1938-01-01,14.2
1938-02-01,14.1
1938-03-01,14.1
1938-04-01,14.2
1938-05-01,14.1
1938-06-01,14.1
1938-07-01,14.1
1938-08-01,14.1
1938-09-01,14.1
1938-10-01,14.0
1938-11-01,14.0
1938-12-01,14.0
1939-01-01,14.0
1939-02-01,13.9
1939-03-01,13.9
1939-04-01,13.8
1939-05-01,13.8
1939-06-01,13.8
1939-07-01,13.8
1939-08-01,13.8
1939-09-01,14.1
1939-10-01,14.0
1939-11-01,14.0
1939-12-01,14.0
1940-01-01,13.9
1940-02-01,14.0
1940-03-01,14.0
1940-04-01,14.0
1940-05-01,14.0
1940-06-01,14.1
1940-07-01,14.0
1940-08-01,14.0
1940-09-01,14.0
1940-10-01,14.0
1940-11-01,14.0
1940-12-01,14.1
1941-01-01,14.1
1941-02-01,14.1
1941-03-01,14.2
1941-04-01,14.3
1941-05-01,14.4
1941-06-01,14.7
1941-07-01,14.7
1941-08-01,14.9
1941-09-01,15.1
1941-10-01,15.3
1941-11-01,15.4
1941-12-01,15.5
1942-01-01,15.7
1942-02-01,15.8
1942-03-01,16.0
1942-04-01,16.1
1942-05-01,16.3
1942-06-01,16.3
1942-07-01,16.4
1942-08-01,16.5
1942-09-01,16.5
1942-10-01,16.7
1942-11-01,16.8
1942-12-01,16.9
1943-01-01,16.9
1943-02-01,16.9
1943-03-01,17.2
1943-04-01,17.4
1943-05-01,17.5
1943-06-01,17.5
1943-07-01,17.4
1943-08-01,17.3
1943-09-01,17.4
1943-10-01,17.4
1943-11-01,17.4
1943-12-01,17.4
1944-01-01,17.4
1944-02-01,17.4
1944-03-01,17.4
1944-04-01,17.5
1944-05-01,17.5
1944-06-01,17.6
1944-07-01,17.7
1944-08-01,17.7
1944-09-01,17.7
1944-10-01,17.7
1944-11-01,17.7
1944-12-01,17.8
1945-01-01,17.8
1945-02-01,17.8
1945-03-01,17.8
1945-04-01,17.8
1945-05-01,17.9
1945-06-01,18.1
1945-07-01,18.1
1945-08-01,18.1
1945-09-01,18.1
1945-10-01,18.1
1945-11-01,18.1
1945-12-01,18.2
1946-01-01,18.2
1946-02-01,18.1
1946-03-01,18.3
1946-04-01,18.4
1946-05-01,18.5
1946-06-01,18.7
1946-07-01,19.8
1946-08-01,20.2
1946-09-01,20.4
1946-10-01,20.8
1946-11-01,21.3
1946-12-01,21.5
1947-01-01,21.5
1947-02-01,21.5
1947-03-01,21.9
1947-04-01,21.9
1947-05-01,21.9
1947-06-01,22.0
1947-07-01,22.2
1947-08-01,22.5
1947-09-01,23.0
1947-10-01,23.0
1947-11-01,23.1
1947-12-01,23.4
1948-01-01,23.7
1948-02-01,23.5
1948-03-01,23.4
1948-04-01,23.8
1948-05-01,23.9
1948-06-01,24.1
1948-07-01,24.4
1948-08-01,24.5
1948-09-01,24.5
1948-10-01,24.4
1948-11-01,24.2
1948-12-01,24.1
1949-01-01,24.0
1949-02-01,23.8
1949-03-01,23.8
1949-04-01,23.9
1949-05-01,23.8
1949-06-01,23.9
1949-07-01,23.7
1949-08-01,23.8
1949-09-01,23.9
1949-10-01,23.7
1949-11-01,23.8
1949-12-01,23.6
1950-01-01,23.5
1950-02-01,23.5
1950-03-01,23.6
1950-04-01,23.6
1950-05-01,23.7
1950-06-01,23.8
1950-07-01,24.1
1950-08-01,24.3
1950-09-01,24.4
1950-10-01,24.6
1950-11-01,24.7
1950-12-01,25.0
1951-01-01,25.4
1951-02-01,25.7
1951-03-01,25.8
1951-04-01,25.8
1951-05-01,25.9
1951-06-01,25.9
1951-07-01,25.9
1951-08-01,25.9
1951-09-01,26.1
1951-10-01,26.2
1951-11-01,26.4
1951-12-01,26.5
1952-01-01,26.5
1952-02-01,26.3
1952-03-01,26.3
1952-04-01,26.4
1952-05-01,26.4
1952-06-01,26.5
1952-07-01,26.7
1952-08-01,26.7
1952-09-01,26.7
1952-10-01,26.7
1952-11-01,26.7
1952-12-01,26.7
1953-01-01,26.6
1953-02-01,26.5
1953-03-01,26.6
1953-04-01,26.6
1953-05-01,26.7
1953-06-01,26.8
1953-07-01,26.8
1953-08-01,26.9
1953-09-01,26.9
1953-10-01,27.0
1953-11-01,26.9
1953-12-01,26.9
1954-01-01,26.9
1954-02-01,26.9
1954-03-01,26.9
1954-04-01,26.8
1954-05-01,26.9
1954-06-01,26.9
1954-07-01,26.9
1954-08-01,26.9
1954-09-01,26.8
1954-10-01,26.8
1954-11-01,26.8
1954-12-01,26.7
1955-01-01,26.7
1955-02-01,26.7
1955-03-01,26.7
1955-04-01,26.7
1955-05-01,26.7
1955-06-01,26.7
1955-07-01,26.8
1955-08-01,26.8
1955-09-01,26.9
1955-10-01,26.9
1955-11-01,26.9
1955-12-01,26.8
1956-01-01,26.8
1956-02-01,26.8
1956-03-01,26.8
1956-04-01,26.9
1956-05-01,27.0
1956-06-01,27.2
1956-07-01,27.4
1956-08-01,27.3
1956-09-01,27.4
1956-10-01,27.5
1956-11-01,27.5
1956-12-01,27.6
1957-01-01,27.6
1957-02-01,27.7
1957-03-01,27.8
1957-04-01,27.9
1957-05-01,28.0
1957-06-01,28.1
1957-07-01,28.3
1957-08-01,28.3
1957-09-01,28.3
1957-10-01,28.3
1957-11-01,28.4
1957-12-01,28.4
1958-01-01,28.6
1958-02-01,28.6
1958-03-01,28.8
1958-04-01,28.9
1958-05-01,28.9
1958-06-01,28.9
1958-07-01,29.0
1958-08-01,28.9
1958-09-01,28.9
1958-10-01,28.9
1958-11-01,29.0
1958-12-01,28.9
1959-01-01,29.0
1959-02-01,28.9
1959-03-01,28.9
1959-04-01,29.0
1959-05-01,29.0
1959-06-01,29.1
1959-07-01,29.2
1959-08-01,29.2
1959-09-01,29.3
1959-10-01,29.4
1959-11-01,29.4
1959-12-01,29.4
1960-01-01,29.3
1960-02-01,29.4
1960-03-01,29.4
1960-04-01,29.5
1960-05-01,29.5
1960-06-01,29.6
1960-07-01,29.6
1960-08-01,29.6
1960-09-01,29.6
1960-10-01,29.8
1960-11-01,29.8
1960-12-01,29.8
1961-01-01,29.8
1961-02-01,29.8
1961-03-01,29.8
1961-04-01,29.8
1961-05-01,29.8
1961-06-01,29.8
1961-07-01,30.0
1961-08-01,29.9
1961-09-01,30.0
1961-10-01,30.0
1961-11-01,30.0
1961-12-01,30.0
1962-01-01,30.0
1962-02-01,30.1
1962-03-01,30.1
1962-04-01,30.2
1962-05-01,30.2
1962-06-01,30.2
1962-07-01,30.3
1962-08-01,30.3
1962-09-01,30.4
1962-10-01,30.4
1962-11-01,30.4
1962-12-01,30.4
1963-01-01,30.4
1963-02-01,30.4
1963-03-01,30.5
1963-04-01,30.5
1963-05-01,30.5
1963-06-01,30.6
1963-07-01,30.7
1963-08-01,30.7
1963-09-01,30.7
1963-10-01,30.8
1963-11-01,30.8
1963-12-01,30.9
1964-01-01,30.9
1964-02-01,30.9
1964-03-01,30.9
1964-04-01,30.9
1964-05-01,30.9
1964-06-01,31.0
1964-07-01,31.1
1964-08-01,31.0
1964-09-01,31.1
1964-10-01,31.1
1964-11-01,31.2
1964-12-01,31.2
1965-01-01,31.2
1965-02-01,31.2
1965-03-01,31.3
1965-04-01,31.4
1965-05-01,31.4
1965-06-01,31.6
1965-07-01,31.6
1965-08-01,31.6
1965-09-01,31.6
1965-10-01,31.7
1965-11-01,31.7
1965-12-01,31.8
1966-01-01,31.8
1966-02-01,32.0
1966-03-01,32.1
1966-04-01,32.3
1966-05-01,32.3
1966-06-01,32.4
1966-07-01,32.5
1966-08-01,32.7
1966-09-01,32.7
1966-10-01,32.9
1966-11-01,32.9
1966-12-01,32.9
1967-01-01,32.9
1967-02-01,32.9
1967-03-01,33.0
1967-04-01,33.1
1967-05-01,33.2
1967-06-01,33.3
1967-07-01,33.4
1967-08-01,33.5
1967-09-01,33.6
1967-10-01,33.7
1967-11-01,33.8
1967-12-01,33.9
1968-01-01,34.1
1968-02-01,34.2
1968-03-01,34.3
1968-04-01,34.4
1968-05-01,34.5
1968-06-01,34.7
1968-07-01,34.9
1968-08-01,35.0
1968-09-01,35.1
1968-10-01,35.3
1968-11-01,35.4
1968-12-01,35.5
1969-01-01,35.6
1969-02-01,35.8
1969-03-01,36.1
1969-04-01,36.3
1969-05-01,36.4
1969-06-01,36.6
1969-07-01,36.8
1969-08-01,37.0
1969-09-01,37.1
1969-10-01,37.3
1969-11-01,37.5
1969-12-01,37.7
1970-01-01,37.8
1970-02-01,38.0
1970-03-01,38.2
1970-04-01,38.5
1970-05-01,38.6
1970-06-01,38.8
1970-07-01,39.0
1970-08-01,39.0
1970-09-01,39.2
1970-10-01,39.4
1970-11-01,39.6
1970-12-01,39.8
1971-01-01,39.8
1971-02-01,39.9
1971-03-01,40.0
1971-04-01,40.1
1971-05-01,40.3
1971-06-01,40.6
1971-07-01,40.7
1971-08-01,40.8
1971-09-01,40.8
1971-10-01,40.9
1971-11-01,40.9
1971-12-01,41.1
1972-01-01,41.1
1972-02-01,41.3
1972-03-01,41.4
1972-04-01,41.5
1972-05-01,41.6
1972-06-01,41.7
1972-07-01,41.9
1972-08-01,42.0
1972-09-01,42.1
1972-10-01,42.3
1972-11-01,42.4
1972-12-01,42.5
1973-01-01,42.6
1973-02-01,42.9
1973-03-01,43.3
1973-04-01,43.6
1973-05-01,43.9
1973-06-01,44.2
1973-07-01,44.3
1973-08-01,45.1
1973-09-01,45.2
1973-10-01,45.6
1973-11-01,45.9
1973-12-01,46.2
1974-01-01,46.6
1974-02-01,47.2
1974-03-01,47.8
1974-04-01,48.0
1974-05-01,48.6
1974-06-01,49.0
1974-07-01,49.4
1974-08-01,50.0
1974-09-01,50.6
1974-10-01,51.1
1974-11-01,51.5
1974-12-01,51.9
1975-01-01,52.1
1975-02-01,52.5
1975-03-01,52.7
1975-04-01,52.9
1975-05-01,53.2
1975-06-01,53.6
1975-07-01,54.2
1975-08-01,54.3
1975-09-01,54.6
1975-10-01,54.9
1975-11-01,55.3
1975-12-01,55.5
1976-01-01,55.6
1976-02-01,55.8
1976-03-01,55.9
1976-04-01,56.1
1976-05-01,56.5
1976-06-01,56.8
1976-07-01,57.1
1976-08-01,57.4
1976-09-01,57.6
1976-10-01,57.9
1976-11-01,58.0
1976-12-01,58.2
1977-01-01,58.5
1977-02-01,59.1
1977-03-01,59.5
1977-04-01,60.0
1977-05-01,60.3
1977-06-01,60.7
1977-07-01,61.0
1977-08-01,61.2
1977-09-01,61.4
1977-10-01,61.6
1977-11-01,61.9
1977-12-01,62.1
1978-01-01,62.5
1978-02-01,62.9
1978-03-01,63.4
1978-04-01,63.9
1978-05-01,64.5
1978-06-01,65.2
1978-07-01,65.7
1978-08-01,66.0
1978-09-01,66.5
1978-10-01,67.1
1978-11-01,67.4
1978-12-01,67.7
1979-01-01,68.3
1979-02-01,69.1
1979-03-01,69.8
1979-04-01,70.6
1979-05-01,71.5
1979-06-01,72.3
1979-07-01,73.1
1979-08-01,73.8
1979-09-01,74.6
1979-10-01,75.2
1979-11-01,75.9
1979-12-01,76.7
1980-01-01,77.8
1980-02-01,78.9
1980-03-01,80.1
1980-04-01,81.0
1980-05-01,81.8
1980-06-01,82.7
1980-07-01,82.7
1980-08-01,83.3
1980-09-01,84.0
1980-10-01,84.8
1980-11-01,85.5
1980-12-01,86.3
1981-01-01,87.0
1981-02-01,87.9
1981-03-01,88.5
1981-04-01,89.1
1981-05-01,89.8
1981-06-01,90.6
1981-07-01,91.6
1981-08-01,92.3
1981-09-01,93.2
1981-10-01,93.4
1981-11-01,93.7
1981-12-01,94.0
1982-01-01,94.3
1982-02-01,94.6
1982-03-01,94.5
1982-04-01,94.9
1982-05-01,95.8
1982-06-01,97.0
1982-07-01,97.5
1982-08-01,97.7
1982-09-01,97.9
1982-10-01,98.2
1982-11-01,98.0
1982-12-01,97.6
1983-01-01,97.8
1983-02-01,97.9
1983-03-01,97.9
1983-04-01,98.6
1983-05-01,99.2
1983-06-01,99.5
1983-07-01,99.9
1983-08-01,100.2
1983-09-01,100.7
1983-10-01,101.0
1983-11-01,101.2
1983-12-01,101.3
1984-01-01,101.9
1984-02-01,102.4
1984-03-01,102.6
1984-04-01,103.1
1984-05-01,103.4
1984-06-01,103.7
1984-07-01,104.1
1984-08-01,104.5
1984-09-01,105.0
1984-10-01,105.3
1984-11-01,105.3
1984-12-01,105.3
1985-01-01,105.5
1985-02-01,106.0
1985-03-01,106.4
1985-04-01,106.9
1985-05-01,107.3
1985-06-01,107.6
1985-07-01,107.8
1985-08-01,108.0
1985-09-01,108.3
1985-10-01,108.7
1985-11-01,109.0
1985-12-01,109.3
1986-01-01,109.6
1986-02-01,109.3
1986-03-01,108.8
1986-04-01,108.6
1986-05-01,108.9
1986-06-01,109.5
1986-07-01,109.5
1986-08-01,109.7
1986-09-01,110.2
1986-10-01,110.3
1986-11-01,110.4
1986-12-01,110.5
1987-01-01,111.2
1987-02-01,111.6
1987-03-01,112.1
1987-04-01,112.7
1987-05-01,113.1
1987-06-01,113.5
1987-07-01,113.8
1987-08-01,114.4
1987-09-01,115.0
1987-10-01,115.3
1987-11-01,115.4
1987-12-01,115.4
1988-01-01,115.7
1988-02-01,116.0
1988-03-01,116.5
1988-04-01,117.1
1988-05-01,117.5
1988-06-01,118.0
1988-07-01,118.5
1988-08-01,119.0
1988-09-01,119.8
1988-10-01,120.2
1988-11-01,120.3
1988-12-01,120.5
1989-01-01,121.1
1989-02-01,121.6
1989-03-01,122.3
1989-04-01,123.1
1989-05-01,123.8
1989-06-01,124.1
1989-07-01,124.4
1989-08-01,124.6
1989-09-01,125.0
1989-10-01,125.6
1989-11-01,125.9
1989-12-01,126.1
1990-01-01,127.4
1990-02-01,128.0
1990-03-01,128.7
1990-04-01,128.9
1990-05-01,129.2
1990-06-01,129.9
1990-07-01,130.4
1990-08-01,131.6
1990-09-01,132.7
1990-10-01,133.5
1990-11-01,133.8
1990-12-01,133.8
1991-01-01,134.6
1991-02-01,134.8
1991-03-01,135.0
1991-04-01,135.2
1991-05-01,135.6
1991-06-01,136.0
1991-07-01,136.2
1991-08-01,136.6
1991-09-01,137.2
1991-10-01,137.4
1991-11-01,137.8
1991-12-01,137.9
1992-01-01,138.1
1992-02-01,138.6
1992-03-01,139.3
1992-04-01,139.5
1992-05-01,139.7
1992-06-01,140.2
1992-07-01,140.5
1992-08-01,140.9
1992-09-01,141.3
1992-10-01,141.8
1992-11-01,142.0
1992-12-01,141.9
1993-01-01,142.6
1993-02-01,143.1
1993-03-01,143.6
1993-04-01,144.0
1993-05-01,144.2
1993-06-01,144.4
1993-07-01,144.4
1993-08-01,144.8
1993-09-01,145.1
1993-10-01,145.7
1993-11-01,145.8
1993-12-01,145.8
1994-01-01,146.2
1994-02-01,146.7
1994-03-01,147.2
1994-04-01,147.4
1994-05-01,147.5
1994-06-01,148.0
1994-07-01,148.4
1994-08-01,149.0
1994-09-01,149.4
1994-10-01,149.5
1994-11-01,149.7
1994-12-01,149.7
1995-01-01,150.3
1995-02-01,150.9
1995-03-01,151.4
1995-04-01,151.9
1995-05-01,152.2
1995-06-01,152.5
1995-07-01,152.5
1995-08-01,152.9
1995-09-01,153.2
1995-10-01,153.7
1995-11-01,153.6
1995-12-01,153.5
1996-01-01,154.4
1996-02-01,154.9
1996-03-01,155.7
1996-04-01,156.3
1996-05-01,156.6
1996-06-01,156.7
1996-07-01,157.0
1996-08-01,157.3
1996-09-01,157.8
1996-10-01,158.3
1996-11-01,158.6
1996-12-01,158.6
1997-01-01,159.1
1997-02-01,159.6
1997-03-01,160.0
1997-04-01,160.2
1997-05-01,160.1
1997-06-01,160.3
1997-07-01,160.5
1997-08-01,160.8
1997-09-01,161.2
1997-10-01,161.6
1997-11-01,161.5
1997-12-01,161.3
1998-01-01,161.6
1998-02-01,161.9
1998-03-01,162.2
1998-04-01,162.5
1998-05-01,162.8
1998-06-01,163.0
1998-07-01,163.2
1998-08-01,163.4
1998-09-01,163.6
1998-10-01,164.0
1998-11-01,164.0
1998-12-01,163.9
1999-01-01,164.3
1999-02-01,164.5
1999-03-01,165.0
1999-04-01,166.2
1999-05-01,166.2
1999-06-01,166.2
1999-07-01,166.7
1999-08-01,167.1
1999-09-01,167.9
1999-10-01,168.2
1999-11-01,168.3
1999-12-01,168.3
2000-01-01,168.8
2000-02-01,169.8
2000-03-01,171.2
2000-04-01,171.3
2000-05-01,171.5
2000-06-01,172.4
2000-07-01,172.8
2000-08-01,172.8
2000-09-01,173.7
2000-10-01,174.0
2000-11-01,174.1
2000-12-01,174.0
2001-01-01,175.1
2001-02-01,175.8
2001-03-01,176.2
2001-04-01,176.9
2001-05-01,177.7
2001-06-01,178.0
2001-07-01,177.5
2001-08-01,177.5
2001-09-01,178.3
2001-10-01,177.7
2001-11-01,177.4
2001-12-01,176.7
2002-01-01,177.1
2002-02-01,177.8
2002-03-01,178.8
2002-04-01,179.8
2002-05-01,179.8
2002-06-01,179.9
2002-07-01,180.1
2002-08-01,180.7
2002-09-01,181.0
2002-10-01,181.3
2002-11-01,181.3
2002-12-01,180.9
2003-01-01,181.7
2003-02-01,183.1
2003-03-01,184.2
2003-04-01,183.8
2003-05-01,183.5
2003-06-01,183.7
2003-07-01,183.9
2003-08-01,184.6
2003-09-01,185.2
2003-10-01,185.0
2003-11-01,184.5
2003-12-01,184.3
2004-01-01,185.2
2004-02-01,186.2
2004-03-01,187.4
2004-04-01,188.0
2004-05-01,189.1
2004-06-01,189.7
2004-07-01,189.4
2004-08-01,189.5
2004-09-01,189.9
2004-10-01,190.9
2004-11-01,191.0
2004-12-01,190.3
2005-01-01,190.7
2005-02-01,191.8
2005-03-01,193.3
2005-04-01,194.6
2005-05-01,194.4
2005-06-01,194.5
2005-07-01,195.4
2005-08-01,196.4
2005-09-01,198.8
2005-10-01,199.2
2005-11-01,197.6
2005-12-01,196.8
2006-01-01,198.3
2006-02-01,198.7
2006-03-01,199.8
2006-04-01,201.5
2006-05-01,202.5
2006-06-01,202.9
2006-07-01,203.5
2006-08-01,203.9
2006-09-01,202.9
2006-10-01,201.8
2006-11-01,201.5
2006-12-01,201.8
2007-01-01,202.416
2007-02-01,203.499
2007-03-01,205.352
2007-04-01,206.686
2007-05-01,207.949
2007-06-01,208.352
2007-07-01,208.299
2007-08-01,207.917
2007-09-01,208.49
2007-10-01,208.936
2007-11-01,210.177
2007-12-01,210.036
2008-01-01,211.08
2008-02-01,211.693
2008-03-01,213.528
2008-04-01,214.823
2008-05-01,216.632
2008-06-01,218.815
2008-07-01,219.964
2008-08-01,219.086
2008-09-01,218.783
2008-10-01,216.573
2008-11-01,212.425
2008-12-01,210.228
2009-01-01,211.143
2009-02-01,212.193
2009-03-01,212.709
2009-04-01,213.24
2009-05-01,213.856
2009-06-01,215.693
2009-07-01,215.351
2009-08-01,215.834
2009-09-01,215.969
2009-10-01,216.177
2009-11-01,216.33
2009-12-01,215.949
2010-01-01,216.687
2010-02-01,216.741
2010-03-01,217.631
2010-04-01,218.009
2010-05-01,218.178
2010-06-01,217.965
2010-07-01,218.011
2010-08-01,218.312
2010-09-01,218.439
2010-10-01,218.711
2010-11-01,218.803
2010-12-01,219.179
2011-01-01,220.223
2011-02-01,221.309
2011-03-01,223.467
2011-04-01,224.906
2011-05-01,225.964
2011-06-01,225.722
2011-07-01,225.922
2011-08-01,226.545
2011-09-01,226.889
2011-10-01,226.421
2011-11-01,226.23
2011-12-01,225.672
2012-01-01,226.665
2012-02-01,227.663
2012-03-01,229.392
2012-04-01,230.085
2012-05-01,229.815
2012-06-01,229.478
2012-07-01,229.104
2012-08-01,230.379
2012-09-01,231.407
2012-10-01,231.317
2012-11-01,230.221
2012-12-01,229.601
2013-01-01,230.28
2013-02-01,232.166
2013-03-01,232.773
2013-04-01,232.531
2013-05-01,232.945
2013-06-01,233.504
2013-07-01,233.596
2013-08-01,233.877
2013-09-01,234.149
2013-10-01,233.546
2013-11-01,233.069
2013-12-01,233.049
2014-01-01,233.916
2014-02-01,234.781
2014-03-01,236.293
2014-04-01,237.072
2014-05-01,237.9
2014-06-01,238.343
2014-07-01,238.25
2014-08-01,237.852
2014-09-01,238.031
2014-10-01,237.433
2014-11-01,236.151
2014-12-01,234.812
2015-01-01,233.707
2015-02-01,234.722
2015-03-01,236.119
2015-04-01,236.599
2015-05-01,237.805
2015-06-01,238.638
2015-07-01,238.654
2015-08-01,238.316
2015-09-01,237.945
2015-10-01,237.838
2015-11-01,237.336
2015-12-01,236.525
2016-01-01,236.916
2016-02-01,237.111
2016-03-01,238.132
2016-04-01,239.261
2016-05-01,240.229
2016-06-01,241.018
2016-07-01,240.628
2016-08-01,240.849
2016-09-01,241.428
2016-10-01,241.729
2016-11-01,241.353
2016-12-01,241.432
2017-01-01,242.839
2017-02-01,243.603
2017-03-01,243.801
2017-04-01,244.524
2017-05-01,244.733
2017-06-01,244.955
2017-07-01,244.786
2017-08-01,245.519
2017-09-01,246.819
2017-10-01,246.663
2017-11-01,246.669
2017-12-01,246.524
2018-01-01,247.867
2018-02-01,248.991
2018-03-01,249.554
2018-04-01,250.546
2018-05-01,251.588
2018-06-01,251.989
2018-07-01,252.006
2018-08-01,252.146
2018-09-01,252.439
2018-10-01,252.885
2018-11-01,252.038
2018-12-01,251.233
2019-01-01,251.712
2019-02-01,252.776
2019-03-01,254.202
2019-04-01,255.548
2019-05-01,256.092
2019-06-01,256.143
2019-07-01,256.571
2019-08-01,256.558
2019-09-01,256.759
2019-10-01,257.346
2019-11-01,257.208
2019-12-01,256.974
2020-01-01,257.971
2020-02-01,258.678
2020-03-01,258.115
2020-04-01,256.389
2020-05-01,256.394
2020-06-01,257.797
2020-07-01,259.101
2020-08-01,259.918
2020-09-01,260.28
2020-10-01,260.388
2020-11-01,260.229
2020-12-01,260.474
2021-01-01,261.582
2021-02-01,263.014
2021-03-01,264.877
2021-04-01,267.054
2021-05-01,269.195
2021-06-01,271.696
2021-07-01,273.003
2021-08-01,273.567
2021-09-01,274.31
2021-10-01,276.589
2021-11-01,277.948
2021-12-01,278.802
2022-01-01,281.148
2022-02-01,283.716
2022-03-01,287.504
2022-04-01,289.109
2022-05-01,292.296
2022-06-01,296.311
2022-07-01,296.276
2022-08-01,296.171
2022-09-01,296.808
2022-10-01,298.012
2022-11-01,297.711
2022-12-01,296.797
2023-01-01,299.17
2023-02-01,300.84
2023-03-01,301.836
2023-04-01,303.363
2023-05-01,304.127
2023-06-01,305.109
2023-07-01,305.691
2023-08-01,307.026
2023-09-01,307.789
2023-10-01,307.671
2023-11-01,307.051
2023-12-01,306.746
2024-01-01,308.417
2024-02-01,310.326
2024-03-01,312.332
2024-04-01,313.548
2024-05-01,314.069
2024-06-01,314.175
2024-07-01,314.54
2024-08-01,314.796
2024-09-01,315.301
2024-10-01,315.664
2024-11-01,315.493
2024-12-01,315.605
2025-01-01,317.671
2025-02-01,319.082
2025-03-01,319.799
2025-04-01,320.795
2025-05-01,321.465


File: data/dolar_ccl.csv
---
Content:
date,value
2023-01-02,344.88
2023-01-03,344.44
2023-01-04,339.48
2023-01-05,342.16
2023-01-06,338.92
2023-01-09,333.97
2023-01-10,331.97
2023-01-11,336.96
2023-01-12,343.57
2023-01-13,349.26
2023-01-16,356.38
2023-01-17,362.19
2023-01-18,351.82
2023-01-19,355.41
2023-01-20,360.98
2023-01-23,363.19
2023-01-24,360.03
2023-01-25,365.99
2023-01-26,369.39
2023-01-27,370.39
2023-01-30,369.52
2023-01-31,367.42
2023-02-01,367.07
2023-02-02,366.83
2023-02-03,362.95
2023-02-06,365.71
2023-02-07,366.16
2023-02-08,366.13
2023-02-09,371.6
2023-02-10,371.23
2023-02-13,370.87
2023-02-14,369.82
2023-02-15,368.52
2023-02-16,370.02
2023-02-17,369.8
2023-02-20,369.8
2023-02-21,369.8
2023-02-22,368.46
2023-02-23,367.03
2023-02-24,367.02
2023-02-27,364.93
2023-02-28,366.41
2023-03-01,368.88
2023-03-02,372.57
2023-03-03,372.31
2023-03-06,372.68
2023-03-07,375.69
2023-03-08,378.96
2023-03-09,387.78
2023-03-10,393.68
2023-03-13,395.5
2023-03-14,391.47
2023-03-15,397.07
2023-03-16,400.62
2023-03-17,403.57
2023-03-20,401.36
2023-03-21,399.62
2023-03-22,397.17
2023-03-23,390.19
2023-03-24,390.19
2023-03-27,392.58
2023-03-28,390.63
2023-03-29,395.89
2023-03-30,402.79
2023-03-31,406.54
2023-04-03,406.77
2023-04-04,409.82
2023-04-05,408.24
2023-04-06,408.24
2023-04-07,408.24
2023-04-10,403.17
2023-04-11,398.97
2023-04-12,398.31
2023-04-13,402.14
2023-04-14,404.88
2023-04-17,409.04
2023-04-18,425.9
2023-04-19,429.65
2023-04-20,435.74
2023-04-21,455.11
2023-04-24,462.35
2023-04-25,465.97
2023-04-26,469.32
2023-04-27,457.29
2023-04-28,453.16
2023-05-01,453.16
2023-05-02,433.64
2023-05-03,427.27
2023-05-04,420.79
2023-05-05,440.61
2023-05-08,440.3
2023-05-09,434.0
2023-05-10,441.64
2023-05-11,441.64
2023-05-12,440.8
2023-05-15,444.6
2023-05-16,447.43
2023-05-17,454.37
2023-05-18,478.98
2023-05-19,474.35
2023-05-22,478.92
2023-05-23,481.11
2023-05-24,479.65
2023-05-25,480.88
2023-05-26,480.88
2023-05-29,480.66
2023-05-30,463.14
2023-05-31,474.99
2023-06-01,469.55
2023-06-02,479.0
2023-06-05,496.78
2023-06-06,493.46
2023-06-07,489.85
2023-06-08,481.54
2023-06-09,479.27
2023-06-12,503.37
2023-06-13,492.22
2023-06-14,495.56
2023-06-15,493.92
2023-06-16,487.12
2023-06-19,487.12
2023-06-20,487.12
2023-06-21,492.71
2023-06-22,502.34
2023-06-23,488.05
2023-06-26,489.63
2023-06-27,498.18
2023-06-28,496.29
2023-06-29,487.56
2023-06-30,495.64
2023-07-03,485.57
2023-07-04,495.0
2023-07-05,492.9
2023-07-06,498.87
2023-07-07,499.56
2023-07-10,500.53
2023-07-11,500.41
2023-07-12,501.46
2023-07-13,502.46
2023-07-14,504.49
2023-07-17,507.53
2023-07-18,520.74
2023-07-19,526.26
2023-07-20,532.51
2023-07-21,533.27
2023-07-24,531.88
2023-07-25,530.1
2023-07-26,527.72
2023-07-27,531.34
2023-07-28,536.07
2023-07-31,555.1
2023-08-01,560.13
2023-08-02,568.59
2023-08-03,576.7
2023-08-04,585.31
2023-08-07,597.63
2023-08-08,597.4
2023-08-09,591.7
2023-08-10,598.83
2023-08-11,601.24
2023-08-14,654.95
2023-08-15,702.22
2023-08-16,722.98
2023-08-17,743.44
2023-08-18,745.78
2023-08-21,746.14
2023-08-22,745.51
2023-08-23,746.6
2023-08-24,761.61
2023-08-25,770.12
2023-08-28,787.36
2023-08-29,802.35
2023-08-30,798.38
2023-08-31,780.54
2023-09-01,767.88
2023-09-04,769.98
2023-09-05,761.48
2023-09-06,762.97
2023-09-07,738.69
2023-09-08,741.09
2023-09-11,736.03
2023-09-12,739.15
2023-09-13,741.06
2023-09-14,742.66
2023-09-15,740.08
2023-09-18,734.43
2023-09-19,737.71
2023-09-20,742.94
2023-09-21,748.87
2023-09-22,753.08
2023-09-25,761.71
2023-09-26,775.52
2023-09-27,789.68
2023-09-28,819.07
2023-09-29,822.23
2023-10-02,829.67
2023-10-03,837.8
2023-10-04,904.99
2023-10-05,893.88
2023-10-06,891.96
2023-10-09,881.52
2023-10-10,953.56
2023-10-11,944.76
2023-10-12,966.77
2023-10-13,966.96
2023-10-16,966.96
2023-10-17,962.15
2023-10-18,952.59
2023-10-19,957.07
2023-10-20,1110.59
2023-10-23,935.45
2023-10-24,887.88
2023-10-25,888.91
2023-10-26,872.78
2023-10-27,859.73
2023-10-30,853.07
2023-10-31,864.84
2023-11-01,883.05
2023-11-02,883.21
2023-11-03,868.08
2023-11-06,868.08
2023-11-07,857.74
2023-11-08,823.26
2023-11-09,871.33
2023-11-10,877.02
2023-11-13,878.29
2023-11-14,875.28
2023-11-15,875.19
2023-11-16,870.26
2023-11-17,876.96
2023-11-20,876.27
2023-11-21,881.85
2023-11-22,947.16
2023-11-23,962.0
2023-11-24,925.18
2023-11-27,858.28
2023-11-28,848.9
2023-11-29,820.27
2023-11-30,836.84
2023-12-01,904.36
2023-12-04,890.78
2023-12-05,909.52
2023-12-06,937.44
2023-12-07,991.83
2023-12-08,991.66
2023-12-11,1000.55
2023-12-12,1032.95
2023-12-13,1008.09
2023-12-14,1016.71
2023-12-15,997.17
2023-12-18,946.65
2023-12-19,951.01
2023-12-20,945.11
2023-12-21,944.88
2023-12-22,941.72
2023-12-25,941.96
2023-12-26,901.25
2023-12-27,870.97
2023-12-28,945.02
2023-12-29,973.31
2024-01-01,973.15
2024-01-02,997.45
2024-01-03,1049.17
2024-01-04,1088.99
2024-01-05,1140.53
2024-01-08,1200.75
2024-01-09,1193.3
2024-01-10,1183.02
2024-01-11,1147.42
2024-01-12,1136.0
2024-01-15,1164.6
2024-01-16,1214.66
2024-01-17,1273.87
2024-01-18,1281.2
2024-01-19,1306.38
2024-01-22,1310.4
2024-01-23,1284.32
2024-01-24,1303.82
2024-01-25,1283.25
2024-01-26,1231.3
2024-01-29,1264.24
2024-01-30,1270.0
2024-01-31,1251.26
2024-02-01,1282.31
2024-02-02,1284.97
2024-02-05,1293.53
2024-02-06,1252.55
2024-02-07,1262.93
2024-02-08,1248.66
2024-02-09,1230.05
2024-02-12,1229.01
2024-02-13,1229.01
2024-02-14,1176.43
2024-02-15,1153.28
2024-02-16,1115.43
2024-02-19,1143.92
2024-02-20,1131.28
2024-02-21,1115.22
2024-02-22,1094.67
2024-02-23,1111.53
2024-02-26,1096.27
2024-02-27,1088.52
2024-02-28,1073.35
2024-02-29,1071.46
2024-03-01,1089.77
2024-03-04,1064.1
2024-03-05,1042.13
2024-03-06,1022.59
2024-03-07,1030.4
2024-03-08,1047.74
2024-03-11,1021.92
2024-03-12,1067.23
2024-03-13,1053.33
2024-03-14,1060.28
2024-03-15,1067.88
2024-03-18,1080.9
2024-03-19,1083.87
2024-03-20,1098.0
2024-03-21,1099.56
2024-03-22,1096.17
2024-03-25,1079.28
2024-03-26,1101.44
2024-03-27,1085.25
2024-03-28,1085.7
2024-03-29,1085.7
2024-04-01,1085.7
2024-04-02,1085.7
2024-04-03,1069.44
2024-04-04,1057.22
2024-04-05,1048.61
2024-04-08,1034.15
2024-04-09,1046.46
2024-04-10,1045.66
2024-04-11,1049.08
2024-04-12,1047.54
2024-04-15,1074.13
2024-04-16,1075.81
2024-04-17,1062.61
2024-04-18,1066.1
2024-04-19,1068.98
2024-04-22,1058.29
2024-04-23,1051.95
2024-04-24,1054.07
2024-04-25,1080.88
2024-04-26,1085.25
2024-04-29,1090.65
2024-04-30,1092.13
2024-05-01,1091.95
2024-05-02,1120.29
2024-05-03,1121.12
2024-05-06,1108.31
2024-05-07,1094.7
2024-05-08,1076.02
2024-05-09,1083.51
2024-05-10,1078.58
2024-05-13,1075.65
2024-05-14,1084.68
2024-05-15,1092.37
2024-05-16,1099.3
2024-05-17,1103.69
2024-05-20,1142.54
2024-05-21,1195.46
2024-05-22,1256.39
2024-05-23,1256.04
2024-05-24,1234.96
2024-05-27,1244.56
2024-05-28,1233.75
2024-05-29,1214.74
2024-05-30,1213.28
2024-05-31,1246.82
2024-06-03,1297.47
2024-06-04,1311.29
2024-06-05,1304.57
2024-06-06,1297.19
2024-06-07,1312.5
2024-06-10,1306.41
2024-06-11,1305.54
2024-06-12,1301.89
2024-06-13,1274.21
2024-06-14,1267.49
2024-06-17,1267.39
2024-06-18,1264.17
2024-06-19,1291.63
2024-06-20,1291.63
2024-06-21,1291.63
2024-06-24,1313.69
2024-06-25,1312.66
2024-06-26,1341.13
2024-06-27,1345.7
2024-06-28,1350.18
2024-07-01,1412.48
2024-07-02,1428.72
2024-07-03,1394.29
2024-07-04,1398.43
2024-07-05,1392.38
2024-07-08,1386.59
2024-07-09,1386.59
2024-07-10,1390.55
2024-07-11,1414.42
2024-07-12,1427.9
2024-07-15,1307.18
2024-07-16,1285.99
2024-07-17,1308.83
2024-07-18,1332.64
2024-07-19,1328.48
2024-07-22,1329.81
2024-07-23,1337.16
2024-07-24,1335.69
2024-07-25,1329.53
2024-07-26,1317.85
2024-07-29,1294.23
2024-07-30,1265.05
2024-07-31,1285.41
2024-08-01,1302.24
2024-08-02,1321.96
2024-08-05,1337.52
2024-08-06,1341.12
2024-08-07,1327.03
2024-08-08,1311.1
2024-08-09,1297.87
2024-08-12,1281.35
2024-08-13,1266.98
2024-08-14,1269.33
2024-08-15,1275.84
2024-08-16,1292.11
2024-08-19,1286.6
2024-08-20,1290.0
2024-08-21,1286.66
2024-08-22,1285.52
2024-08-23,1286.0
2024-08-26,1289.7
2024-08-27,1293.53
2024-08-28,1291.78
2024-08-29,1289.04
2024-08-30,1298.37
2024-09-02,1295.36
2024-09-03,1302.55
2024-09-04,1293.94
2024-09-05,1271.6
2024-09-06,1257.91
2024-09-09,1245.65
2024-09-10,1249.13
2024-09-11,1245.78
2024-09-12,1259.83
2024-09-13,1253.33
2024-09-16,1240.97
2024-09-17,1241.3
2024-09-18,1233.11
2024-09-19,1217.96
2024-09-20,1219.98
2024-09-23,1227.16
2024-09-24,1223.02
2024-09-25,1228.48
2024-09-26,1227.58
2024-09-27,1232.76
2024-09-30,1243.91
2024-10-01,1245.99
2024-10-02,1234.15
2024-10-03,1232.44
2024-10-04,1225.94
2024-10-07,1217.21
2024-10-08,1210.96
2024-10-09,1191.42
2024-10-10,1177.07
2024-10-11,1176.9
2024-10-14,1181.42
2024-10-15,1179.48
2024-10-16,1190.81
2024-10-17,1192.86
2024-10-18,1194.62
2024-10-21,1194.93
2024-10-22,1194.93
2024-10-23,1183.91
2024-10-24,1179.6
2024-10-25,1163.53
2024-10-28,1154.77
2024-10-29,1154.9
2024-10-30,1158.6
2024-10-31,1158.12
2024-11-01,1177.29
2024-11-04,1178.76
2024-11-05,1181.83
2024-11-06,1168.59
2024-11-07,1164.25
2024-11-08,1158.29
2024-11-11,1163.39
2024-11-12,1163.39
2024-11-13,1155.92
2024-11-14,1157.72
2024-11-15,1136.64
2024-11-18,1134.15
2024-11-19,1106.27
2024-11-20,1111.38
2024-11-21,1111.24
2024-11-22,1106.07
2024-11-25,1110.11
2024-11-26,1107.58
2024-11-27,1104.91
2024-11-28,1107.79
2024-11-29,1109.33
2024-12-02,1097.69
2024-12-03,1105.92
2024-12-04,1102.79
2024-12-05,1086.87
2024-12-06,1074.2
2024-12-09,1071.43
2024-12-10,1076.4
2024-12-11,1071.43
2024-12-12,1066.95
2024-12-13,1092.37
2024-12-16,1122.06
2024-12-17,1150.78
2024-12-18,1161.64
2024-12-19,1157.59
2024-12-20,1164.65
2024-12-23,1166.99
2024-12-24,1174.55
2024-12-25,1173.62
2024-12-26,1187.62
2024-12-27,1180.3
2024-12-30,1184.16
2024-12-31,1186.93
2025-01-01,1186.93
2025-01-02,1174.59
2025-01-03,1186.04
2025-01-06,1187.05
2025-01-07,1186.07
2025-01-08,1184.88
2025-01-09,1184.98
2025-01-10,1188.33
2025-01-13,1196.75
2025-01-14,1191.05
2025-01-15,1194.14
2025-01-16,1180.53
2025-01-17,1187.63
2025-01-20,1195.98
2025-01-21,1189.33
2025-01-22,1187.49
2025-01-23,1187.0
2025-01-24,1164.77
2025-01-27,1176.15
2025-01-28,1175.5
2025-01-29,1181.87
2025-01-30,1180.7
2025-01-31,1185.97
2025-02-03,1195.55
2025-02-04,1199.7
2025-02-05,1200.48
2025-02-06,1201.96
2025-02-07,1203.17
2025-02-10,1190.38
2025-02-11,1189.68
2025-02-12,1185.19
2025-02-13,1191.08
2025-02-14,1197.21
2025-02-17,1210.61
2025-02-18,1215.71
2025-02-19,1207.55
2025-02-20,1214.76
2025-02-21,1218.15
2025-02-24,1213.16
2025-02-25,1208.21
2025-02-26,1219.99
2025-02-27,1224.07
2025-02-28,1219.98
2025-03-03,1219.98
2025-03-04,1219.98
2025-03-05,1241.44
2025-03-06,1227.65
2025-03-07,1219.73
2025-03-10,1231.63
2025-03-11,1226.42
2025-03-12,1229.63
2025-03-13,1233.48
2025-03-14,1239.88
2025-03-17,1254.99
2025-03-18,1299.01
2025-03-19,1291.86
2025-03-20,1283.89
2025-03-21,1286.95
2025-03-24,1286.95
2025-03-25,1297.05
2025-03-26,1299.63
2025-03-27,1298.77
2025-03-28,1309.15
2025-03-31,1319.46
2025-04-01,1307.92
2025-04-02,1307.92
2025-04-03,1320.37
2025-04-04,1337.05
2025-04-07,1360.25
2025-04-08,1368.39
2025-04-09,1342.03
2025-04-10,1367.3
2025-04-11,1340.47
2025-04-14,1256.04
2025-04-15,1242.0
2025-04-16,1177.11
2025-04-17,1177.11
2025-04-18,1177.11
2025-04-21,1132.46
2025-04-22,1153.59
2025-04-23,1181.79
2025-04-24,1199.67
2025-04-25,1201.15
2025-04-28,1190.97
2025-04-29,1188.67
2025-04-30,1195.73
2025-05-01,1195.73
2025-05-02,1195.73
2025-05-05,1211.65
2025-05-06,1211.31
2025-05-07,1165.4
2025-05-08,1157.44
2025-05-09,1159.25
2025-05-12,1155.98
2025-05-13,1158.28
2025-05-14,1158.28
2025-05-15,1166.04
2025-05-16,1178.82
2025-05-19,1162.59
2025-05-20,1171.71
2025-05-21,1162.14
2025-05-22,1163.2
2025-05-23,1165.18
2025-05-26,1151.25
2025-05-27,1171.98
2025-05-28,1175.33
2025-05-29,1194.22
2025-05-30,1204.92
2025-06-02,1196.18
2025-06-03,1199.76
2025-06-04,1201.49
2025-06-05,1193.41
2025-06-06,1194.81
2025-06-09,1198.27
2025-06-10,1193.85
2025-06-11,1193.28
2025-06-12,1187.02
2025-06-13,1200.37
2025-06-16,1205.65
2025-06-17,1204.75
2025-06-18,1172.16
2025-06-19,1157.71
2025-06-20,1157.71
2025-06-23,1182.97
2025-06-24,1183.95
2025-06-25,1199.2
2025-06-26,1200.16
2025-06-27,1203.26
2025-06-30,1210.25
2025-07-01,1233.08


File: data/closed_trades.csv
---
Content:
ticker,quantity,buy_date,buy_price,buy_currency,sell_date,sell_price,sell_currency,total_cost_ars,total_revenue_ars,total_cost_usd,total_revenue_usd,buy_broker_transaction_id,sell_broker_transaction_id
AUSO,10.0,2025-02-19,3555.0,ARS,2025-04-11,2455.0,ARS,35584.4124,24526.2356,29.50467837421024,18.39472268680672,31910725,38024564


File: data/dolar_mep.csv
---
Content:
date,value
2023-01-02,329.21
2023-01-03,330.7
2023-01-04,334.93
2023-01-05,332.67
2023-01-06,329.91
2023-01-09,327.17
2023-01-10,325.87
2023-01-11,327.7
2023-01-12,342.38
2023-01-13,340.23
2023-01-16,344.03
2023-01-17,341.89
2023-01-18,340.3
2023-01-19,332.83
2023-01-20,352.52
2023-01-23,352.21
2023-01-24,353.85
2023-01-25,351.98
2023-01-26,352.22
2023-01-27,352.78
2023-01-30,353.93
2023-01-31,354.81
2023-02-01,353.7
2023-02-02,354.75
2023-02-03,357.36
2023-02-06,353.94
2023-02-07,353.2
2023-02-08,354.95
2023-02-09,354.36
2023-02-10,354.15
2023-02-13,355.27
2023-02-14,355.28
2023-02-15,356.23
2023-02-16,357.61
2023-02-17,355.59
2023-02-20,355.59
2023-02-21,355.59
2023-02-22,356.45
2023-02-23,357.26
2023-02-24,356.78
2023-02-27,356.07
2023-02-28,357.47
2023-03-01,359.78
2023-03-02,364.81
2023-03-03,366.5
2023-03-06,362.42
2023-03-07,366.97
2023-03-08,372.86
2023-03-09,375.43
2023-03-10,380.64
2023-03-13,379.51
2023-03-14,377.76
2023-03-15,383.31
2023-03-16,388.76
2023-03-17,388.84
2023-03-20,387.63
2023-03-21,385.98
2023-03-22,387.1
2023-03-23,375.72
2023-03-24,375.72
2023-03-27,376.4
2023-03-28,383.55
2023-03-29,386.81
2023-03-30,391.82
2023-03-31,397.37
2023-04-03,396.94
2023-04-04,402.41
2023-04-05,396.6
2023-04-06,396.6
2023-04-07,396.6
2023-04-10,390.71
2023-04-11,387.0
2023-04-12,386.34
2023-04-13,388.14
2023-04-14,398.62
2023-04-17,395.45
2023-04-18,408.86
2023-04-19,409.77
2023-04-20,421.9
2023-04-21,437.75
2023-04-24,449.02
2023-04-25,447.5
2023-04-26,446.43
2023-04-27,442.23
2023-04-28,436.05
2023-05-01,436.05
2023-05-02,428.84
2023-05-03,431.03
2023-05-04,430.19
2023-05-05,432.35
2023-05-08,432.08
2023-05-09,432.08
2023-05-10,436.09
2023-05-11,440.07
2023-05-12,434.31
2023-05-15,437.66
2023-05-16,442.43
2023-05-17,444.08
2023-05-18,473.5
2023-05-19,465.42
2023-05-22,464.27
2023-05-23,466.09
2023-05-24,462.35
2023-05-25,459.55
2023-05-26,459.55
2023-05-29,459.51
2023-05-30,462.32
2023-05-31,466.98
2023-06-01,467.03
2023-06-02,469.09
2023-06-05,472.29
2023-06-06,473.87
2023-06-07,472.76
2023-06-08,473.92
2023-06-09,473.5
2023-06-12,474.49
2023-06-13,473.19
2023-06-14,474.98
2023-06-15,474.59
2023-06-16,479.35
2023-06-19,479.35
2023-06-20,479.35
2023-06-21,476.46
2023-06-22,482.51
2023-06-23,486.66
2023-06-26,479.79
2023-06-27,483.43
2023-06-28,484.01
2023-06-29,482.23
2023-06-30,484.69
2023-07-03,483.45
2023-07-04,482.9
2023-07-05,480.37
2023-07-06,484.68
2023-07-07,484.78
2023-07-10,490.4
2023-07-11,488.64
2023-07-12,488.65
2023-07-13,498.73
2023-07-14,499.71
2023-07-17,499.86
2023-07-18,494.9
2023-07-19,494.65
2023-07-20,495.84
2023-07-21,498.08
2023-07-24,497.09
2023-07-25,507.12
2023-07-26,503.9
2023-07-27,510.62
2023-07-28,508.01
2023-07-31,509.1
2023-08-01,509.45
2023-08-02,512.54
2023-08-03,513.99
2023-08-04,514.71
2023-08-07,516.7
2023-08-08,521.92
2023-08-09,527.92
2023-08-10,529.82
2023-08-11,539.89
2023-08-14,621.14
2023-08-15,667.17
2023-08-16,651.42
2023-08-17,659.49
2023-08-18,657.48
2023-08-21,657.48
2023-08-22,658.88
2023-08-23,661.32
2023-08-24,665.4
2023-08-25,664.97
2023-08-28,667.95
2023-08-29,671.02
2023-08-30,670.99
2023-08-31,670.83
2023-09-01,670.37
2023-09-04,672.62
2023-09-05,672.34
2023-09-06,673.47
2023-09-07,674.84
2023-09-08,673.36
2023-09-11,675.54
2023-09-12,676.46
2023-09-13,676.32
2023-09-14,677.79
2023-09-15,678.68
2023-09-18,679.36
2023-09-19,680.08
2023-09-20,679.95
2023-09-21,680.85
2023-09-22,682.08
2023-09-25,683.01
2023-09-26,685.58
2023-09-27,689.85
2023-09-28,694.89
2023-09-29,701.01
2023-10-02,709.83
2023-10-03,720.62
2023-10-04,747.68
2023-10-05,784.83
2023-10-06,812.75
2023-10-09,840.01
2023-10-10,844.81
2023-10-11,854.74
2023-10-12,870.46
2023-10-13,870.46
2023-10-16,870.46
2023-10-17,884.82
2023-10-18,884.74
2023-10-19,888.6
2023-10-20,898.91
2023-10-23,899.33
2023-10-24,843.82
2023-10-25,872.31
2023-10-26,855.48
2023-10-27,806.84
2023-10-30,859.75
2023-10-31,852.85
2023-11-01,840.28
2023-11-02,863.64
2023-11-03,844.01
2023-11-06,844.01
2023-11-07,848.8
2023-11-08,840.97
2023-11-09,863.3
2023-11-10,881.71
2023-11-13,870.63
2023-11-14,868.42
2023-11-15,882.35
2023-11-16,857.14
2023-11-17,872.61
2023-11-20,872.61
2023-11-21,930.44
2023-11-22,984.19
2023-11-23,1006.39
2023-11-24,972.75
2023-11-27,889.15
2023-11-28,867.12
2023-11-29,838.16
2023-11-30,858.82
2023-12-01,907.69
2023-12-04,913.05
2023-12-05,934.71
2023-12-06,936.93
2023-12-07,986.37
2023-12-08,986.37
2023-12-11,993.53
2023-12-12,1011.46
2023-12-13,1037.29
2023-12-14,1003.94
2023-12-15,993.73
2023-12-18,963.22
2023-12-19,964.69
2023-12-20,946.47
2023-12-21,971.88
2023-12-22,954.23
2023-12-25,954.23
2023-12-26,939.7
2023-12-27,932.59
2023-12-28,950.24
2023-12-29,995.0
2024-01-01,995.0
2024-01-02,991.3
2024-01-03,1033.56
2024-01-04,1050.43
2024-01-05,1104.93
2024-01-08,1141.62
2024-01-09,1160.38
2024-01-10,1142.45
2024-01-11,1119.17
2024-01-12,1096.39
2024-01-15,1125.3
2024-01-16,1163.48
2024-01-17,1221.49
2024-01-18,1227.54
2024-01-19,1251.67
2024-01-22,1241.41
2024-01-23,1233.22
2024-01-24,1232.72
2024-01-25,1229.32
2024-01-26,1188.48
2024-01-29,1219.88
2024-01-30,1208.21
2024-01-31,1175.67
2024-02-01,1235.43
2024-02-02,1237.43
2024-02-05,1209.52
2024-02-06,1194.74
2024-02-07,1199.41
2024-02-08,1183.55
2024-02-09,1173.36
2024-02-12,1173.36
2024-02-13,1173.36
2024-02-14,1124.14
2024-02-15,1086.86
2024-02-16,1064.71
2024-02-19,1108.61
2024-02-20,1080.31
2024-02-21,1072.51
2024-02-22,1054.78
2024-02-23,1076.6
2024-02-26,1051.04
2024-02-27,1044.95
2024-02-28,1031.25
2024-02-29,1032.24
2024-03-01,1053.46
2024-03-04,1029.54
2024-03-05,1016.08
2024-03-06,981.21
2024-03-07,996.63
2024-03-08,1000.47
2024-03-11,980.98
2024-03-12,1036.19
2024-03-13,1012.01
2024-03-14,1015.67
2024-03-15,1027.63
2024-03-18,1023.89
2024-03-19,1032.36
2024-03-20,1042.43
2024-03-21,1036.25
2024-03-22,1036.16
2024-03-25,1012.94
2024-03-26,1027.09
2024-03-27,1016.09
2024-03-28,1016.09
2024-03-29,1016.09
2024-04-01,1016.09
2024-04-02,1016.09
2024-04-03,991.25
2024-04-04,996.25
2024-04-05,1000.88
2024-04-08,985.86
2024-04-09,1000.69
2024-04-10,999.64
2024-04-11,994.86
2024-04-12,1005.46
2024-04-15,1021.55
2024-04-16,1031.63
2024-04-17,1021.16
2024-04-18,1021.92
2024-04-19,1026.65
2024-04-22,1014.98
2024-04-23,1006.71
2024-04-24,1015.54
2024-04-25,1034.06
2024-04-26,1034.04
2024-04-29,1037.77
2024-04-30,1040.89
2024-05-01,1040.89
2024-05-02,1064.56
2024-05-03,1072.64
2024-05-06,1064.47
2024-05-07,1048.49
2024-05-08,1038.77
2024-05-09,1046.02
2024-05-10,1035.73
2024-05-13,1034.89
2024-05-14,1041.65
2024-05-15,1050.33
2024-05-16,1062.25
2024-05-17,1071.12
2024-05-20,1106.22
2024-05-21,1170.28
2024-05-22,1230.6
2024-05-23,1234.4
2024-05-24,1205.73
2024-05-27,1228.18
2024-05-28,1200.9
2024-05-29,1177.14
2024-05-30,1182.71
2024-05-31,1215.93
2024-06-03,1269.91
2024-06-04,1280.8
2024-06-05,1283.09
2024-06-06,1272.01
2024-06-07,1282.33
2024-06-10,1272.63
2024-06-11,1273.9
2024-06-12,1278.94
2024-06-13,1241.1
2024-06-14,1244.64
2024-06-17,1244.64
2024-06-18,1245.49
2024-06-19,1273.81
2024-06-20,1273.81
2024-06-21,1273.81
2024-06-24,1295.22
2024-06-25,1308.99
2024-06-26,1332.13
2024-06-27,1331.96
2024-06-28,1347.96
2024-07-01,1413.01
2024-07-02,1428.46
2024-07-03,1382.5
2024-07-04,1395.68
2024-07-05,1396.24
2024-07-08,1386.86
2024-07-09,1386.86
2024-07-10,1377.39
2024-07-11,1403.33
2024-07-12,1416.22
2024-07-15,1307.54
2024-07-16,1278.94
2024-07-17,1300.0
2024-07-18,1315.29
2024-07-19,1331.7
2024-07-22,1333.37
2024-07-23,1324.96
2024-07-24,1337.51
2024-07-25,1332.77
2024-07-26,1323.15
2024-07-29,1296.57
2024-07-30,1267.95
2024-07-31,1293.33
2024-08-01,1300.14
2024-08-02,1334.04
2024-08-05,1346.09
2024-08-06,1336.4
2024-08-07,1331.95
2024-08-08,1310.45
2024-08-09,1298.27
2024-08-12,1284.35
2024-08-13,1272.49
2024-08-14,1268.81
2024-08-15,1276.21
2024-08-16,1295.3
2024-08-19,1290.1
2024-08-20,1287.82
2024-08-21,1291.75
2024-08-22,1283.23
2024-08-23,1282.7
2024-08-26,1288.25
2024-08-27,1286.19
2024-08-28,1282.19
2024-08-29,1271.33
2024-08-30,1279.96
2024-09-02,1285.01
2024-09-03,1294.46
2024-09-04,1279.84
2024-09-05,1258.82
2024-09-06,1243.87
2024-09-09,1226.42
2024-09-10,1230.44
2024-09-11,1230.16
2024-09-12,1239.48
2024-09-13,1226.53
2024-09-16,1215.72
2024-09-17,1214.04
2024-09-18,1206.72
2024-09-19,1197.74
2024-09-20,1200.1
2024-09-23,1204.57
2024-09-24,1202.13
2024-09-25,1209.79
2024-09-26,1210.95
2024-09-27,1207.75
2024-09-30,1215.03
2024-10-01,1220.07
2024-10-02,1207.51
2024-10-03,1191.74
2024-10-04,1187.52
2024-10-07,1184.07
2024-10-08,1169.54
2024-10-09,1147.4
2024-10-10,1134.84
2024-10-11,1134.84
2024-10-14,1143.88
2024-10-15,1139.91
2024-10-16,1159.89
2024-10-17,1159.6
2024-10-18,1159.05
2024-10-21,1167.91
2024-10-22,1161.97
2024-10-23,1161.99
2024-10-24,1160.0
2024-10-25,1141.81
2024-10-28,1134.18
2024-10-29,1138.18
2024-10-30,1138.32
2024-10-31,1131.46
2024-11-01,1146.17
2024-11-04,1151.54
2024-11-05,1153.5
2024-11-06,1145.69
2024-11-07,1135.99
2024-11-08,1130.2
2024-11-11,1131.23
2024-11-12,1124.4
2024-11-13,1121.11
2024-11-14,1105.75
2024-11-15,1096.02
2024-11-18,1096.02
2024-11-19,1075.12
2024-11-20,1074.86
2024-11-21,1078.95
2024-11-22,1080.4
2024-11-25,1077.58
2024-11-26,1076.12
2024-11-27,1074.61
2024-11-28,1075.15
2024-11-29,1075.76
2024-12-02,1068.89
2024-12-03,1075.65
2024-12-04,1076.34
2024-12-05,1062.16
2024-12-06,1049.33
2024-12-09,1049.31
2024-12-10,1060.52
2024-12-11,1057.72
2024-12-12,1058.21
2024-12-13,1073.08
2024-12-16,1100.27
2024-12-17,1145.26
2024-12-18,1131.22
2024-12-19,1131.19
2024-12-20,1142.2
2024-12-23,1162.3
2024-12-24,1160.97
2024-12-25,1160.97
2024-12-26,1170.89
2024-12-27,1170.56
2024-12-30,1170.41
2024-12-31,1170.41
2025-01-01,1170.41
2025-01-02,1162.12
2025-01-03,1165.88
2025-01-06,1165.09
2025-01-07,1164.37
2025-01-08,1164.72
2025-01-09,1164.19
2025-01-10,1164.01
2025-01-13,1163.21
2025-01-14,1162.93
2025-01-15,1164.05
2025-01-16,1166.03
2025-01-17,1165.84
2025-01-20,1165.9
2025-01-21,1167.61
2025-01-22,1172.67
2025-01-23,1167.35
2025-01-24,1155.75
2025-01-27,1162.22
2025-01-28,1161.38
2025-01-29,1163.36
2025-01-30,1164.89
2025-01-31,1164.79
2025-02-03,1178.82
2025-02-04,1188.0
2025-02-05,1191.94
2025-02-06,1189.03
2025-02-07,1194.47
2025-02-10,1184.07
2025-02-11,1180.85
2025-02-12,1186.35
2025-02-13,1187.89
2025-02-14,1183.88
2025-02-17,1210.09
2025-02-18,1203.16
2025-02-19,1201.86
2025-02-20,1206.06
2025-02-21,1205.88
2025-02-24,1207.48
2025-02-25,1211.96
2025-02-26,1211.56
2025-02-27,1215.29
2025-02-28,1228.48
2025-03-03,1228.48
2025-03-04,1228.48
2025-03-05,1235.31
2025-03-06,1237.86
2025-03-07,1221.93
2025-03-10,1228.92
2025-03-11,1230.38
2025-03-12,1229.34
2025-03-13,1233.55
2025-03-14,1237.78
2025-03-17,1250.59
2025-03-18,1299.32
2025-03-19,1286.38
2025-03-20,1287.59
2025-03-21,1287.22
2025-03-24,1287.22
2025-03-25,1294.3
2025-03-26,1295.63
2025-03-27,1292.29
2025-03-28,1302.44
2025-03-31,1313.97
2025-04-01,1314.47
2025-04-02,1314.47
2025-04-03,1319.42
2025-04-04,1340.44
2025-04-07,1370.35
2025-04-08,1376.58
2025-04-09,1341.72
2025-04-10,1364.01
2025-04-11,1333.33
2025-04-14,1253.4
2025-04-15,1237.9
2025-04-16,1165.93
2025-04-17,1165.93
2025-04-18,1165.93
2025-04-21,1122.08
2025-04-22,1140.38
2025-04-23,1168.0
2025-04-24,1186.53
2025-04-25,1184.24
2025-04-28,1176.55
2025-04-29,1173.15
2025-04-30,1183.37
2025-05-01,1183.37
2025-05-02,1183.37
2025-05-05,1202.92
2025-05-06,1199.61
2025-05-07,1156.07
2025-05-08,1143.32
2025-05-09,1144.11
2025-05-12,1141.2
2025-05-13,1140.92
2025-05-14,1140.92
2025-05-15,1140.92
2025-05-16,1155.12
2025-05-19,1148.77
2025-05-20,1153.33
2025-05-21,1148.8
2025-05-22,1143.49
2025-05-23,1143.32
2025-05-26,1145.42
2025-05-27,1161.3
2025-05-28,1164.8
2025-05-29,1181.9
2025-05-30,1191.72
2025-06-02,1183.78
2025-06-03,1189.67
2025-06-04,1193.22
2025-06-05,1192.38
2025-06-06,1192.4
2025-06-09,1192.16
2025-06-10,1189.44
2025-06-11,1186.93
2025-06-12,1186.51
2025-06-13,1191.74
2025-06-16,1191.06
2025-06-17,1190.22
2025-06-18,1167.07
2025-06-19,1174.03
2025-06-20,1174.03
2025-06-23,1185.15
2025-06-24,1184.49
2025-06-25,1196.43
2025-06-26,1199.28
2025-06-27,1197.54
2025-06-30,1211.1
2025-07-01,1232.83


File: src/domain/portfolio.py
---
Content:
# src/domain/portfolio.py
"""
Defines the Portfolio entity, which holds the state of all financial data.
"""

import pandas as pd


class Portfolio:
    """
    Represents the portfolio state. It is initialized with pre-loaded data
    and does not handle file I/O or presentation logic.
    """

    def __init__(
        self,
        open_positions: pd.DataFrame,
        closed_trades: pd.DataFrame,
        dolar_mep: pd.DataFrame,
        dolar_ccl: pd.DataFrame,
        cpi_arg: pd.DataFrame,
        cpi_usa: pd.DataFrame,
    ):
        self.open_positions = open_positions
        self.closed_trades = closed_trades
        self.dolar_mep = dolar_mep
        self.dolar_ccl = dolar_ccl
        self.cpi_arg = cpi_arg
        self.cpi_usa = cpi_usa


File: src/application/transaction_service.py
---
Content:
import pandas as pd
from src.domain.portfolio import Portfolio
from src.infrastructure.persistence.portfolio_repository import PortfolioRepository


class TransactionService:
    def __init__(self, portfolio: Portfolio, repository: PortfolioRepository):
        self.portfolio = portfolio
        self.repository = repository

    def _get_exchange_rate(self, date: pd.Timestamp, asset_type: str) -> float | None:
        """Gets the appropriate exchange rate for a given date."""
        rate_df = (
            self.portfolio.dolar_ccl
            if asset_type == "CEDEAR"
            else self.portfolio.dolar_mep
        )
        if rate_df.empty:
            return None

        merged = pd.merge_asof(
            pd.DataFrame({"date": [date]}),
            rate_df.sort_values("date"),
            on="date",
            direction="nearest",
        )
        return merged["value"].iloc[0] if not merged.empty else None

    def record_buy(self, details: dict):
        """Records a new buy transaction, adds it to open positions, and saves."""
        rate = self._get_exchange_rate(details["date"], details["asset_type"])
        if not rate:
            raise ValueError(f"Could not find exchange rate for date {details['date']}")

        cost = (
            (details["quantity"] * details["price"])
            + details["market_fees"]
            + details["taxes"]
        )

        cost_ars, cost_usd = (
            (cost, cost / rate) if details["currency"] == "ARS" else (cost * rate, cost)
        )

        new_position = {
            "purchase_id": pd.Timestamp.now().strftime("%Y%m%d%H%M%S%f"),
            "purchase_date": details["date"],
            "ticker": details["ticker"],
            "quantity": details["quantity"],
            "total_cost_ars": cost_ars,
            "total_cost_usd": cost_usd,
            "asset_type": details["asset_type"],
            "original_price": details["price"],
            "original_currency": details["currency"],
        }

        new_df = pd.DataFrame([new_position])
        self.portfolio.open_positions = pd.concat(
            [self.portfolio.open_positions, new_df], ignore_index=True
        )
        self.repository.save_open_positions(self.portfolio.open_positions)

    def record_sell(self, details: dict):
        """Records a sell, matches it against open lots (FIFO), and updates state."""
        open_lots = self.portfolio.open_positions
        matching_lots = (
            open_lots[open_lots["ticker"] == details["ticker"]]
            .sort_values(by="purchase_date")
            .copy()
        )

        if matching_lots["quantity"].sum() < details["quantity"]:
            raise ValueError(f"Not enough quantity of {details['ticker']} to sell.")

        rate = self._get_exchange_rate(details["date"], details["asset_type"])
        revenue = (
            (details["quantity"] * details["price"])
            - details["market_fees"]
            - details["taxes"]
        )
        revenue_ars, revenue_usd = (
            (revenue, revenue / rate)
            if details["currency"] == "ARS"
            else (revenue * rate, revenue)
        )

        quantity_to_sell = details["quantity"]
        newly_closed_trades = []

        for index, lot in matching_lots.iterrows():
            if quantity_to_sell <= 0:
                break

            qty_from_lot = min(lot["quantity"], quantity_to_sell)
            proportion = qty_from_lot / lot["quantity"]

            closed_trade = {
                "ticker": lot["ticker"],
                "quantity": qty_from_lot,
                "buy_date": lot["purchase_date"],
                "sell_date": details["date"],
                "total_cost_ars": lot["total_cost_ars"] * proportion,
                "total_cost_usd": lot["total_cost_usd"] * proportion,
                "total_revenue_ars": revenue_ars * (qty_from_lot / details["quantity"]),
                "total_revenue_usd": revenue_usd * (qty_from_lot / details["quantity"]),
            }
            newly_closed_trades.append(closed_trade)

            # Update open positions dataframe
            open_lots.loc[index, "quantity"] -= qty_from_lot
            open_lots.loc[index, "total_cost_ars"] -= closed_trade["total_cost_ars"]
            open_lots.loc[index, "total_cost_usd"] -= closed_trade["total_cost_usd"]
            quantity_to_sell -= qty_from_lot

        # Remove fully sold lots and save
        self.portfolio.open_positions = open_lots[open_lots["quantity"] > 0.001]
        self.repository.save_open_positions(self.portfolio.open_positions)

        # Append new closed trades and save
        new_closed_df = pd.DataFrame(newly_closed_trades)
        self.portfolio.closed_trades = pd.concat(
            [self.portfolio.closed_trades, new_closed_df], ignore_index=True
        )
        self.repository.save_closed_trades(self.portfolio.closed_trades)


File: src/application/reconciliation_service.py
---
Content:
import json
import pandas as pd
import logging
import os
import config
from src.shared.utils import map_instrument_to_asset_type, parse_option_details
from src.infrastructure.exchange_rate_loader import ExchangeRateLoader

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)


class ExchangeRateLoader:
    """Loads and provides exchange rates from CSV files."""

    def __init__(self):
        self.dolar_mep = self._load_rate_file(config.DOLAR_MEP_FILE)
        self.dolar_ccl = self._load_rate_file(config.DOLAR_CCL_FILE)

    def _load_rate_file(self, file_path: str):
        try:
            return pd.read_csv(file_path, parse_dates=["date"])
        except FileNotFoundError:
            return pd.DataFrame(columns=["date", "value"])

    def get_rate(self, date, asset_type: str):
        """Gets the appropriate exchange rate for a given date and asset type."""
        rate_df = self.dolar_ccl if asset_type == "CEDEAR" else self.dolar_mep
        if rate_df.empty:
            return None
        merged = pd.merge_asof(
            pd.DataFrame({"date": [pd.to_datetime(date)]}),
            rate_df.sort_values("date"),
            on="date",
            direction="nearest",
        )
        return (
            merged["value"].iloc[0]
            if not merged.empty and pd.notna(merged["value"].iloc[0])
            else None
        )


def _load_processed_ids() -> set:
    """Loads all previously processed transaction IDs from portfolio CSVs."""
    processed_ids = set()
    files_to_check = {
        config.OPEN_POSITIONS_FILE: ["broker_transaction_id"],
        config.CLOSED_TRADES_FILE: [
            "buy_broker_transaction_id",
            "sell_broker_transaction_id",
        ],
    }
    for file_path, id_cols in files_to_check.items():
        try:
            if os.path.exists(file_path):
                df = pd.read_csv(file_path)
                for col in id_cols:
                    if col in df.columns:
                        processed_ids.update(df[col].dropna().astype(str))
        except (FileNotFoundError, pd.errors.EmptyDataError):
            logging.info(f"{file_path} not found or is empty.")
        except Exception as e:
            logging.error(f"Error reading {file_path} for IDs: {e}")
    return processed_ids


def _load_and_filter_new_transactions(processed_ids: set) -> list:
    """Loads transactions from JSON, filtering for new and valid entries."""
    try:
        with open(config.TRANSACTIONS_FILE, "r", encoding="utf-8") as f:
            all_transactions = json.load(f)
    except Exception as e:
        logging.error(f"Could not read or parse {config.TRANSACTIONS_FILE}: {e}")
        return []

    new_transactions = []
    for tx in all_transactions:
        tx_id = str(tx.get("id"))
        if (
            tx_id in processed_ids
            or tx.get("state") != "FULFILLED"
            or tx.get("orderOperation") not in ["BUY", "SELL"]
        ):
            continue
        try:
            instrument = tx.get("instrument", {})
            asset_type = map_instrument_to_asset_type(instrument)
            if asset_type == "UNKNOWN":
                continue

            ticker = (
                (tx.get("symbol") or instrument.get("name", "")).replace("D", "")
                if tx.get("currency") == "USD"
                else (tx.get("symbol") or instrument.get("name"))
            )
            price = (
                float(tx["shareValue"]) / 100.0
                if instrument.get("priceUnitScale") == 100
                else float(tx["shareValue"])
            )

            clean_tx = {
                "broker_id": tx_id,
                "date": pd.to_datetime(tx["operationDate"]).tz_localize(None),
                "op_type": tx["orderOperation"],
                "ticker": ticker,
                "asset_type": asset_type,
                "quantity": float(tx["executedAmount"]),
                "price": price,
                "currency": tx["currency"],
                "fees": abs(float(tx.get("total", 0)) - float(tx.get("totalGross", 0))),
            }
            if asset_type == "OPCION":
                details = parse_option_details(instrument.get("galloName", ""))
                details["expiration_date"] = pd.to_datetime(
                    instrument.get("maturityDate"), errors="coerce"
                )
                clean_tx.update(details)
            new_transactions.append(clean_tx)
            processed_ids.add(tx_id)
        except Exception as e:
            logging.warning(f"Could not process transaction {tx_id}: {e}")

    new_transactions.sort(key=lambda x: x["date"])
    return new_transactions


def _apply_sell_transaction(tx, open_positions, rates):
    """Applies a sell transaction against open lots."""
    newly_closed_trades = []
    remaining_to_sell = tx["quantity"]
    rate = rates.get_rate(tx["date"], tx["asset_type"])
    if not rate:
        logging.warning(f"No exchange rate for {tx['ticker']} on {tx['date'].date()}")

    revenue_ars = (
        (tx["quantity"] * tx["price"]) - tx["fees"]
        if tx["currency"] == "ARS"
        else (((tx["quantity"] * tx["price"]) * rate) - tx["fees"])
    )
    revenue_usd = (
        revenue_ars / rate
        if rate and tx["currency"] == "ARS"
        else (tx["quantity"] * tx["price"]) - (tx["fees"] / rate if rate else 0)
    )

    matching_lots = sorted(
        [p for p in open_positions if p["ticker"] == tx["ticker"]],
        key=lambda p: p["date"],
    )

    for lot in matching_lots:
        if remaining_to_sell <= 0:
            break
        qty_from_lot = min(lot["quantity"], remaining_to_sell)
        proportion = qty_from_lot / lot["quantity"] if lot["quantity"] > 0 else 0

        closed_trade = {
            "ticker": lot["ticker"],
            "quantity": qty_from_lot,
            "buy_date": lot["date"],
            "sell_date": tx["date"],
            "total_cost_ars": (lot.get("total_cost_ars") or 0) * proportion,
            "total_cost_usd": (lot.get("total_cost_usd") or 0) * proportion,
            "total_revenue_ars": (revenue_ars or 0) * (qty_from_lot / tx["quantity"])
            if tx["quantity"] > 0
            else 0,
            "total_revenue_usd": (revenue_usd or 0) * (qty_from_lot / tx["quantity"])
            if tx["quantity"] > 0
            else 0,
            "buy_broker_transaction_id": lot.get("broker_id"),
            "sell_broker_transaction_id": tx["broker_id"],
        }
        newly_closed_trades.append(closed_trade)

        lot["quantity"] -= qty_from_lot
        if lot.get("total_cost_ars"):
            lot["total_cost_ars"] *= 1 - proportion
        if lot.get("total_cost_usd"):
            lot["total_cost_usd"] *= 1 - proportion
        remaining_to_sell -= qty_from_lot

    return newly_closed_trades


def _save_portfolio_state(open_positions, newly_closed_trades):
    """Saves the updated open positions and appends closed trades to CSV files."""
    open_df = pd.DataFrame(open_positions)
    open_df.rename(
        columns={
            "date": "purchase_date",
            "broker_id": "broker_transaction_id",
            "price": "original_price",
            "currency": "original_currency",
        },
        inplace=True,
    )
    final_cols = [
        "purchase_date",
        "ticker",
        "quantity",
        "total_cost_ars",
        "total_cost_usd",
        "asset_type",
        "original_price",
        "original_currency",
        "underlying_asset",
        "option_type",
        "strike_price",
        "expiration_date",
        "broker_transaction_id",
    ]
    for col in final_cols:
        if col not in open_df.columns:
            open_df[col] = pd.NA
    open_df[final_cols].to_csv(
        config.OPEN_POSITIONS_FILE, index=False, date_format="%Y-%m-%d"
    )
    logging.info(f"{len(open_df)} open lots written to {config.OPEN_POSITIONS_FILE}.")

    if newly_closed_trades:
        new_closed_df = pd.DataFrame(newly_closed_trades)
        file_exists = (
            os.path.exists(config.CLOSED_TRADES_FILE)
            and os.path.getsize(config.CLOSED_TRADES_FILE) > 0
        )
        new_closed_df.to_csv(
            config.CLOSED_TRADES_FILE,
            mode="a",
            header=not file_exists,
            index=False,
            date_format="%Y-%m-%d",
        )
        logging.info(
            f"{len(new_closed_df)} new trades appended to {config.CLOSED_TRADES_FILE}."
        )


def reconcile_portfolio():
    """Main reconciliation script orchestrating the load, process, and save steps."""
    logging.info(
        f"Starting incremental reconciliation from {config.TRANSACTIONS_FILE}..."
    )
    rates = ExchangeRateLoader()
    processed_ids = _load_processed_ids()
    new_transactions = _load_and_filter_new_transactions(processed_ids)

    if not new_transactions:
        logging.info("No new transactions to process.")
        return

    try:
        open_positions = pd.read_csv(
            config.OPEN_POSITIONS_FILE, parse_dates=["purchase_date", "expiration_date"]
        ).to_dict("records")
    except (FileNotFoundError, pd.errors.EmptyDataError):
        open_positions = []

    newly_closed_trades = []
    for tx in new_transactions:
        if tx["op_type"] == "BUY":
            rate = rates.get_rate(tx["date"], tx["asset_type"])
            cost_ars = (
                (tx["quantity"] * tx["price"]) + tx["fees"]
                if tx["currency"] == "ARS"
                else ((tx["quantity"] * tx["price"]) * rate)
                if rate
                else None
            )
            cost_usd = (
                cost_ars / rate
                if rate and tx["currency"] == "ARS"
                else (tx["quantity"] * tx["price"]) + (tx["fees"] / rate if rate else 0)
            )
            lot = tx.copy()
            lot.update({"total_cost_ars": cost_ars, "total_cost_usd": cost_usd})
            open_positions.append(lot)
        elif tx["op_type"] == "SELL":
            closed_from_tx = _apply_sell_transaction(tx, open_positions, rates)
            newly_closed_trades.extend(closed_from_tx)
            open_positions = [p for p in open_positions if p["quantity"] > 0.001]

    _save_portfolio_state(open_positions, newly_closed_trades)
    logging.info("Reconciliation complete.")


if __name__ == "__main__":
    reconcile_portfolio()


File: src/application/report_manager.py
---
Content:
import pandas as pd
import logging

import config
from domain.portfolio import Portfolio
from application.reporting_service import ReportingService
from infrastructure import data_fetcher
from infrastructure.gateways import PPIGateway  # For real-time prices


class ReportManager:
    """
    Orchestrates the entire report generation process.
    """

    def __init__(self):
        """
        Initializes the manager by loading primary data sources.
        """
        try:
            self.positions = pd.read_csv(config.OPEN_POSITIONS_FILE)
            self.trades = pd.read_csv(config.CLOSED_TRADES_FILE)
        except FileNotFoundError as e:
            logging.error(f"Initial data file not found: {e}. Please create it first.")
            self.positions = pd.DataFrame(columns=["ticker", "asset_type"])
            self.trades = pd.DataFrame()

    def _ensure_data_is_updated(self):
        """
        Calls the data_fetcher to update all required data sources on-demand.
        """
        logging.info("--- Starting on-demand data update ---")

        # 1. Update macroeconomic data
        data_fetcher.update_cpi_argentina()
        data_fetcher.update_cpi_usa()
        data_fetcher.update_dolar_mep()
        data_fetcher.update_dolar_ccl()

        # 2. Update historical data for assets in the portfolio
        if not self.positions.empty:
            # Create a set of unique assets to avoid duplicate calls
            unique_assets = self.positions[["asset_type", "ticker"]].drop_duplicates()
            for _, row in unique_assets.iterrows():
                data_fetcher.update_historical_asset(row["asset_type"], row["ticker"])

        logging.info("--- On-demand data update finished ---")

    def _load_full_portfolio(self) -> Portfolio:
        """
        Loads all updated data from CSV files into a Portfolio domain object.
        """
        logging.info("Loading all updated data into portfolio object...")
        return Portfolio(
            open_positions=self.positions,
            closed_trades=self.trades,
            cpi_arg=pd.read_csv(config.CPI_ARG_FILE),
            cpi_usa=pd.read_csv(config.CPI_USA_FILE),
            dolar_mep=pd.read_csv(config.DOLAR_MEP_FILE),
            dolar_ccl=pd.read_csv(config.DOLAR_CCL_FILE),
            # Add other necessary dataframes here
        )

    def generate_full_report(self):
        """
        Executes the full process: update, load, and generate report.
        """
        # Step 1: Update local data files
        self._ensure_data_is_updated()

        # Step 2: Load updated data into the domain model
        portfolio = self._load_full_portfolio()

        # Step 3: Instantiate gateways and services
        ppi_gateway = PPIGateway()  # Gateway for real-time prices
        reporting_service = ReportingService(portfolio, ppi_gateway)

        # Step 4: Generate and display reports
        logging.info("--- Generating Open Positions Report ---")
        open_positions_report = reporting_service.generate_open_positions_report()
        print(open_positions_report.get("consolidated"))

        logging.info("--- Generating Closed Trades Report ---")
        closed_trades_report = reporting_service.generate_closed_trades_report()
        print(closed_trades_report)

        return {
            "open_positions": open_positions_report,
            "closed_trades": closed_trades_report,
        }


if __name__ == "__main__":
    # This is how you would run the entire process
    manager = ReportManager()
    final_reports = manager.generate_full_report()


File: src/application/reporting_service.py
---
Content:
import pandas as pd
import logging

# Local application imports
import config
from domain.portfolio import Portfolio
from application.reporting_service import ReportingService
from infrastructure import data_fetcher
from infrastructure.gateways import PPIGateway  # For real-time prices


class ReportManager:
    """
    Orchestrates the entire report generation process.
    """

    def __init__(self):
        """
        Initializes the manager by loading primary data sources.
        """
        try:
            self.positions = pd.read_csv(config.OPEN_POSITIONS_FILE)
            self.trades = pd.read_csv(config.CLOSED_TRADES_FILE)
        except FileNotFoundError as e:
            logging.error(f"Initial data file not found: {e}. Please create it first.")
            self.positions = pd.DataFrame(columns=["ticker", "asset_type"])
            self.trades = pd.DataFrame()

    def _ensure_data_is_updated(self):
        """
        Calls the data_fetcher to update all required data sources on-demand.
        """
        logging.info("--- Starting on-demand data update ---")

        # 1. Update macroeconomic data
        data_fetcher.update_cpi_argentina()
        data_fetcher.update_cpi_usa()
        data_fetcher.update_dolar_mep()
        data_fetcher.update_dolar_ccl()

        # 2. Update historical data for assets in the portfolio
        if not self.positions.empty:
            # Create a set of unique assets to avoid duplicate calls
            unique_assets = self.positions[["asset_type", "ticker"]].drop_duplicates()
            for _, row in unique_assets.iterrows():
                data_fetcher.update_historical_asset(row["asset_type"], row["ticker"])

        logging.info("--- On-demand data update finished ---")

    def _load_full_portfolio(self) -> Portfolio:
        """
        Loads all updated data from CSV files into a Portfolio domain object.
        """
        logging.info("Loading all updated data into portfolio object...")
        return Portfolio(
            open_positions=self.positions,
            closed_trades=self.trades,
            cpi_arg=pd.read_csv(config.CPI_ARG_FILE),
            cpi_usa=pd.read_csv(config.CPI_USA_FILE),
            dolar_mep=pd.read_csv(config.DOLAR_MEP_FILE),
            dolar_ccl=pd.read_csv(config.DOLAR_CCL_FILE),
            # Add other necessary dataframes here
        )

    def generate_full_report(self):
        """
        Executes the full process: update, load, and generate report.
        """
        # Step 1: Update local data files
        self._ensure_data_is_updated()

        # Step 2: Load updated data into the domain model
        portfolio = self._load_full_portfolio()

        # Step 3: Instantiate gateways and services
        ppi_gateway = PPIGateway()  # Gateway for real-time prices
        reporting_service = ReportingService(portfolio, ppi_gateway)

        # Step 4: Generate and display reports
        logging.info("--- Generating Open Positions Report ---")
        open_positions_report = reporting_service.generate_open_positions_report()
        print(open_positions_report.get("consolidated"))

        logging.info("--- Generating Closed Trades Report ---")
        closed_trades_report = reporting_service.generate_closed_trades_report()
        print(closed_trades_report)

        return {
            "open_positions": open_positions_report,
            "closed_trades": closed_trades_report,
        }


if __name__ == "__main__":
    # This is how you would run the entire process
    manager = ReportManager()
    final_reports = manager.generate_full_report()


File: src/presentation/cli.py
---
Content:
"""
Command-Line Interface (CLI) for interacting with the portfolio tracker.
This layer is responsible for user interaction and final presentation.
It orchestrates calls to the application and infrastructure layers.
"""

import pandas as pd
from datetime import datetime
import time

# Componentes de otras capas de la arquitectura
from src.infrastructure.persistence.portfolio_repository import PortfolioRepository
from src.application.reporting_service import ReportingService
from src.application.transaction_service import TransactionService
from src.infrastructure.gateways import PPIGateway


def print_menu():
    """Prints the main menu options to the console."""
    print("\n===== PORTFOLIO TRACKER CLI =====")
    print("1. Record New Transaction")
    print("2. View Open Positions (with Performance)")
    print("3. View Closed Trades History")
    print("4. Update Economic Data (FX and CPI)")
    print("5. Exit")


def display_open_positions_report(report_data: dict[str, pd.DataFrame]):
    """Formats and prints the open positions report, including performance."""
    # --- Display Consolidated Assets ---
    consolidated_df = report_data.get("consolidated", pd.DataFrame())
    print("\n--- Stocks, CEDEARs, Bonds (Consolidated Performance) ---")
    if not consolidated_df.empty:
        display_df = consolidated_df.rename(
            columns={
                "ticker": "Ticker",
                "quantity": "Quantity",
                "current_price": "Current Price",
                "nominal_return_ars_pct": "Return ARS (%)",
                "real_return_ars_pct": "Real Return ARS (%)",
                "age_days": "Open Days",
            }
        )

        # Formateo para añadir el signo '%' y manejar valores nulos
        for col in ["Return ARS (%)", "Real Return ARS (%)"]:
            if col in display_df:
                display_df[col] = display_df[col].apply(
                    lambda x: f"{x:+.2f}%" if pd.notna(x) else "N/A"
                )

        cols = [
            "Ticker",
            "Quantity",
            "Current Price",
            "Return ARS (%)",
            "Real Return ARS (%)",
            "Open Days",
        ]
        print(display_df[cols].round(2).to_string(index=False))
    else:
        print("No positions in Stocks, CEDEARs, or Bonds.")

    # --- Display Options ---
    options_df = report_data.get("options", pd.DataFrame())
    print("\n--- Options (By Purchase Lot) ---")
    if not options_df.empty:
        options_df["purchase_date"] = pd.to_datetime(
            options_df["purchase_date"]
        ).dt.strftime("%d-%m-%Y")
        print(options_df.round(2).to_string(index=False))
    else:
        print("No options positions.")


def display_closed_trades_report(report_df: pd.DataFrame):
    """Formats and prints the closed trades report to the console."""
    print("\n--- CLOSED TRADES HISTORY ---")
    if report_df.empty:
        print("No closed trades recorded.")
        return

    display_cols = {
        "ticker": "Ticker",
        "quantity": "Quantity",
        "buy_date": "Buy Date",
        "sell_date": "Sell Date",
        "nominal_return_ars_pct": "Nom. Ret. ARS (%)",
        "real_return_ars_pct": "Real Ret. ARS (%)",
        "nominal_return_usd_pct": "Nom. Ret. USD (%)",
        "real_return_usd_pct": "Real Ret. USD (%)",
    }

    report_df["buy_date"] = pd.to_datetime(report_df["buy_date"]).dt.strftime(
        "%d-%m-%Y"
    )
    report_df["sell_date"] = pd.to_datetime(report_df["sell_date"]).dt.strftime(
        "%d-%m-%Y"
    )
    display_df = report_df.rename(columns=display_cols)[list(display_cols.values())]
    print(display_df.round(2).to_string(index=False))


def parse_local_number(number_str: str) -> float:
    """Converts a string with local number format to a float."""
    return float(number_str.replace(".", "").replace(",", "."))


def get_validated_input(prompt: str, validation_func, error_msg: str):
    """Generic function to get and validate user input."""
    while True:
        try:
            value = input(prompt)
            return validation_func(value)
        except (ValueError, TypeError):
            print(error_msg)


def get_transaction_details() -> dict:
    """Prompts user for transaction details and returns them in a dictionary."""
    op_type = get_validated_input(
        "Operation type (BUY/SELL): ",
        lambda v: v.upper() if v.upper() in ["BUY", "SELL"] else int("err"),
        "Invalid type. Please enter 'BUY' or 'SELL'.",
    )
    date_obj = get_validated_input(
        "Enter date (DD-MM-YYYY) [default: today]: ",
        lambda v: datetime.today()
        if not v
        else datetime.strptime(v, "%d-%m-%Y"),
        "Invalid date format. Please use DD-MM-YYYY.",
    )
    asset_type = get_validated_input(
        "Asset type (ACCION, CEDEAR, RF): ",
        lambda v: v.upper()
        if v.upper() in ["ACCION", "CEDEAR", "RF", "OPCION"]
        else int("err"),
        "Invalid type.",
    )
    ticker = input("Ticker: ").upper()
    quantity = get_validated_input(
        "Quantity: ", parse_local_number, "Invalid number format."
    )
    currency = get_validated_input(
        "Currency (ARS/USD): ",
        lambda v: v.upper() if v.upper() in ["ARS", "USD"] else int("err"),
        "Invalid currency.",
    )
    price = get_validated_input(
        "Price per unit: ", parse_local_number, "Invalid number format."
    )
    market_fees = get_validated_input(
        "Market Fees: ", parse_local_number, "Invalid number format."
    )
    taxes = get_validated_input("Taxes: ", parse_local_number, "Invalid number format.")

    return {
        "op_type": op_type,
        "date": date_obj,
        "ticker": ticker,
        "quantity": quantity,
        "currency": currency,
        "price": price,
        "market_fees": market_fees,
        "taxes": taxes,
        "asset_type": asset_type,
    }


def main():
    """Main function to run the CLI application."""
    pd.set_option("display.max_columns", None)
    pd.set_option("display.width", 1000)

    print("Initializing services... Please wait.")
    try:
        repository = PortfolioRepository()
        ppi_gateway = PPIGateway()
        print("Giving services time to connect...")
        time.sleep(5)
        print("Services initialized successfully.")
    except Exception as e:
        print(f"FATAL: Could not initialize services. Error: {e}")
        return

    while True:
        portfolio = repository.load_full_portfolio()
        reporting_service = ReportingService(portfolio, ppi_gateway)
        transaction_service = TransactionService(portfolio, repository)

        print_menu()
        choice = input("Select an option: ")

        if choice == "1":
            try:
                details = get_transaction_details()
                if details["op_type"] == "BUY":
                    transaction_service.record_buy(details)
                    print("Buy transaction recorded successfully.")
                elif details["op_type"] == "SELL":
                    transaction_service.record_sell(details)
                    print("Sell transaction recorded successfully.")
            except (ValueError, KeyError) as e:
                print(f"\nERROR: Could not record transaction. {e}")

        elif choice == "2":
            print("\nFetching real-time data and calculating performance...")
            report_data = reporting_service.generate_open_positions_report()
            display_open_positions_report(report_data)

        elif choice == "3":
            report_df = reporting_service.generate_closed_trades_report()
            display_closed_trades_report(report_df)

        elif choice == "4":
            print("\nStarting economic data update...")
            data_fetcher.update_all_data()
            print("Economic data update process finished.")

        elif choice == "5":
            print("Exiting program.")
            break
        else:
            print("Invalid option. Please try again.")


if __name__ == "__main__":
    main()


File: src/presentation/api.py
---
Content:
from flask import Flask, request, jsonify
import logging
from src.domain.portfolio import Portfolio
from src.shared.utils import map_instrument_to_asset_type, parse_option_details

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
app = Flask(__name__)
portfolio = Portfolio()


def parse_transaction_request(data: dict) -> dict:
    """Parses and validates transaction data from an API request."""
    instrument = data.get("instrument")
    if not instrument:
        raise ValueError("Instrument data is missing.")

    asset_type = map_instrument_to_asset_type(instrument)
    if asset_type == "UNKNOWN":
        raise ValueError(f"Unknown asset type for instrument: {instrument}")

    ticker = data.get("symbol") or instrument.get("name")
    currency = data["currency"]
    price = float(data["shareValue"])

    if instrument.get("priceUnitScale") == 100:
        price /= 100.0
    if currency == "USD" and ticker.upper().endswith("D"):
        ticker = ticker[:-1]

    parsed = {
        "broker_transaction_id": data.get("id"),
        "date_str": data["operationDate"].split("T")[0],
        "ticker": ticker,
        "currency": currency,
        "quantity": float(data["executedAmount"]),
        "price": price,
        "market_fees": abs(
            float(data.get("total", 0)) - float(data.get("totalGross", 0))
        ),
        "taxes": 0,
        "asset_type": asset_type,
    }

    if parsed["quantity"] <= 0:
        raise ValueError("Transaction quantity must be positive.")

    if asset_type == "OPCION":
        option_details = parse_option_details(instrument.get("galloName", ""))
        option_details["expiration_date"] = instrument.get("maturityDate")
        parsed.update(option_details)

    return parsed


@app.route("/positions/open", methods=["GET"])
def get_open_positions():
    """Endpoint to retrieve all open positions."""
    try:
        positions = portfolio.get_open_positions()
        return jsonify({"status": "success", "data": positions}), 200
    except Exception as e:
        logging.error(f"Error retrieving open positions: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route("/positions/closed", methods=["GET"])
def get_closed_positions():
    """Endpoint to retrieve all closed positions."""
    try:
        positions = portfolio.get_closed_positions()
        return jsonify({"status": "success", "data": positions}), 200
    except Exception as e:
        logging.error(f"Error retrieving closed positions: {e}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500


@app.route("/transaction", methods=["POST"])
def add_transaction():
    """Endpoint to add a new transaction to the portfolio."""
    data = request.get_json()
    if not data:
        return jsonify({"status": "error", "message": "Invalid JSON"}), 400

    broker_id = data.get("id")
    if broker_id and portfolio.is_transaction_processed(broker_id):
        return jsonify(
            {
                "status": "skipped_duplicate",
                "message": f"Transaction ID {broker_id} already processed.",
            }
        ), 200

    op_type = data.get("orderOperation")
    if op_type not in ["BUY", "SELL"] or data.get("state") != "FULFILLED":
        return jsonify(
            {
                "status": "skipped",
                "message": f"Operation type '{op_type}' or state '{data.get('state')}' skipped.",
            }
        ), 200

    try:
        tx_data = parse_transaction_request(data)
    except (KeyError, TypeError, ValueError) as e:
        logging.error(f"Error parsing transaction data: {e} - Data: {data}")
        return jsonify({"status": "error", "message": f"Data parsing error: {e}"}), 400

    try:
        if op_type == "BUY":
            portfolio.record_buy(**tx_data)
        elif op_type == "SELL":
            # record_sell might have a different signature, e.g., quantity_to_sell
            tx_data["quantity_to_sell"] = tx_data.pop("quantity")
            portfolio.record_sell(**tx_data)

        msg = f"Successfully processed {op_type} for {tx_data['quantity_to_sell'] if op_type == 'SELL' else tx_data['quantity']} of {tx_data['ticker']}."
        logging.info(msg)
        return jsonify({"status": "success", "message": msg}), 201
    except Exception as e:
        logging.error(f"Error processing transaction in portfolio: {e}", exc_info=True)
        return jsonify(
            {"status": "error", "message": f"Portfolio processing error: {e}"}
        ), 500


if __name__ == "__main__":
    app.run(debug=True, port=5001)


File: src/infrastructure/gateways/data912_connector.py
---
Content:
import requests
import logging
import config
import os

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)


class Data912APIConnector:
    def __init__(self, timeout: int = 15):
        self.base_url = config.DATA912_API_URL
        self.timeout = timeout
        logging.info(f"Conector inicializado para la URL base: {self.base_url}")

    def _make_request(self, endpoint: str):
        """
        Método auxiliar para realizar peticiones GET a la API.

        Args:
            endpoint (str): El endpoint específico al que se va a llamar (ej. '/live/mep').

        Returns:
            Una lista o diccionario con los datos, o None si ocurre un error.
        """
        url = f"{self.base_url}{endpoint}"
        logging.info(f"Contactando API en el endpoint: {endpoint}")
        try:
            response = requests.get(url, timeout=self.timeout, verify=True)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.HTTPError as e:
            logging.error(
                f"Error HTTP para el endpoint {endpoint}: {e.response.status_code} {e.response.reason}"
            )
        except requests.exceptions.RequestException as e:
            logging.error(f"Error de conexión con la API en {url}: {e}")
        except (
            ValueError
        ) as e:
            logging.error(f"Error al decodificar la respuesta JSON desde {url}: {e}")

        return None

    def get_mep(self):
        return self._make_request("/live/mep")

    def get_ccl(self):
        return self._make_request("/live/ccl")

    def get_arg_stocks(self):
        return self._make_request("/live/arg_stocks")

    def get_arg_options(self):
        return self._make_request("/live/arg_options")

    def get_arg_cedears(self):
        return self._make_request("/live/arg_cedears")

    def get_arg_bonds(self):
        return self._make_request("/live/arg_bonds")

    def get_arg_notes(self):
        return self._make_request("/live/arg_notes")

    def get_arg_corporate_debt(self):
        return self._make_request("/live/arg_corp")

    def get_usa_adrs(self):
        return self._make_request("/live/usa_adrs")

    def get_usa_stocks(self):
        return self._make_request("/live/usa_stocks")

    def get_historical_stock(self, ticker: str):
        return self._make_request(f"/historical/stocks/{ticker.upper()}")

    def get_historical_cedear(self, ticker: str):
        return self._make_request(f"/historical/cedears/{ticker.upper()}")

    def get_historical_bond(self, ticker: str):
        return self._make_request(f"/historical/bonds/{ticker.upper()}")

    def get_volatilities(self, ticker: str):
        return self._make_request(f"/eod/volatilities/{ticker.upper()}")

    def get_option_chain(self, ticker: str):
        return self._make_request(f"/eod/option_chain/{ticker.upper()}")


File: src/infrastructure/gateways/__init__.py
---
Content:
from .bcra_gateway import BCRAAPIGateway
from .alpha_vantage_gateway import AlphaVantageAPIGateway
from .ambito_gateway import AmbitoGateway
from .ppi_gateway import PPIGateway


File: src/infrastructure/gateways/ambito_gateway.py
---
Content:
import requests
import logging
import pandas as pd

class AmbitoGateway:
    BASE_URL = "https://mercados.ambito.com"
    USER_AGENT = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"

    def fetch_historical_data(self, endpoint: str, start_date: str, end_date: str):
        """
        Fetches historical data from a specific Ambito endpoint.

        Args:
            endpoint: The API endpoint (e.g., "dolarrava/cl").
            start_date: Start date in "YYYY-MM-DD" format.
            end_date: End date in "YYYY-MM-DD" format.
            verify_ssl: Whether to verify the SSL certificate.

        Returns:
            A list of raw data rows or None if an error occurs.
        """
        url = f"{self.BASE_URL}/{endpoint}/historico-general/{start_date}/{end_date}"
        logging.info(f"Fetching data from: {url}")
        try:
            response = requests.get(url, headers={'User-Agent': self.USER_AGENT}, timeout=15, verify=False)
            response.raise_for_status()
            json_response = response.json()
            return json_response[1:] if len(json_response) > 1 else []
        except requests.exceptions.RequestException as e:
            logging.error(f"Error fetching data from Ambito: {e}")
        except (ValueError, IndexError) as e:
            logging.error(f"Error parsing Ambito JSON response: {e}")

        return None

    def parse_historical_data(self, data_rows: list) -> pd.DataFrame:
        """
        Parses raw historical data into a clean pandas DataFrame.

        Args:
            data_rows: A list of lists, where each inner list is a row.

        Returns:
            A DataFrame with 'date' and 'value' columns.
        """
        if not data_rows:
            return pd.DataFrame(columns=['date', 'value'])

        df = pd.DataFrame(data_rows, columns=['date_str', 'value_str'])
        df['date'] = pd.to_datetime(df['date_str'], format='%d/%m/%Y')
        df['value'] = df['value_str'].str.replace(',', '.').astype(float)

        return df[['date', 'value']]


File: src/infrastructure/gateways/alpha_vantage_gateway.py
---
Content:
import os
import requests
import logging


class AlphaVantageAPIGateway:
    BASE_URL = "https://www.alphavantage.co/query"

    def __init__(self, api_key: str = None):
        """
        Initializes the gateway.

        Args:
            api_key: The Alpha Vantage API key. If not provided, it will be
                     loaded from the 'ALPHA_VANTAGE_API_KEY' environment variable.

        Raises:
            ValueError: If the API key is not found.
        """
        from dotenv import load_dotenv

        load_dotenv()
        self.api_key = api_key or os.getenv("ALPHA_VANTAGE_API_KEY")
        if not self.api_key:
            raise ValueError("Alpha Vantage API key is not set or provided.")

    def _make_request(self, params: dict):
        """Helper function to perform API requests."""
        params["apikey"] = self.api_key
        try:
            response = requests.get(self.BASE_URL, params=params, timeout=15)
            response.raise_for_status()
            api_response = response.json()

            if note := api_response.get("Note"):
                logging.warning(f"Note from Alpha Vantage API: {note}")

            return api_response
        except requests.exceptions.RequestException as e:
            logging.error(f"Alpha Vantage API connection error: {e}")
        except ValueError as e:
            logging.error(f"Error parsing Alpha Vantage JSON response: {e}")

        return None

    def get_cpi_data(self):
        """Fetches the monthly US CPI data series."""
        logging.info("Contacting Alpha Vantage for CPI data...")
        params = {"function": "CPI", "interval": "monthly", "datatype": "json"}
        response = self._make_request(params)
        return response.get("data", []) if response else []

    def get_quote_endpoint(self, symbol: str):
        """Fetches real-time quote data for a given symbol."""
        logging.info(f"Contacting Alpha Vantage for quote on symbol: {symbol}")
        params = {"function": "GLOBAL_QUOTE", "symbol": symbol}
        response = self._make_request(params)

        if not response:
            return None

        global_quote = response.get("Global Quote", {})
        if not global_quote or "05. price" not in global_quote:
            logging.warning(f"No valid data returned for symbol {symbol}.")
            return None

        return {
            "price": float(global_quote["05. price"]),
            "change_percent": float(
                global_quote.get("10. change percent", "0%").replace("%", "")
            ),
        }


File: src/infrastructure/gateways/bcra_gateway.py
---
Content:
import requests
import logging


class BCRAAPIGateway:
    """Manages the connection and data fetching from the BCRA Statistics API."""

    BASE_URL = "https://api.bcra.gob.ar/estadisticas/v3.0/monetarias"

    def get_series_data(self, variable_id: int, verify_ssl: bool = False):
        """
        Fetches the complete data series for a specific variable ID.

        Args:
            variable_id: The ID of the variable to fetch.
            verify_ssl: Whether to verify the SSL certificate. Defaults to False.

        Returns:
            A list of data points or None if an error occurs.
        """
        url = f"{self.BASE_URL}/{variable_id}"
        logging.info(f"Contacting BCRA API for variable ID: {variable_id}")
        try:
            response = requests.get(url, timeout=15, verify=verify_ssl)
            response.raise_for_status()
            data = response.json()
            return data.get("results", [])
        except requests.exceptions.HTTPError as e:
            logging.error(
                f"HTTP Error for ID {variable_id}: {e.response.status_code} {e.response.reason}"
            )
        except requests.exceptions.RequestException as e:
            logging.error(f"BCRA API connection error: {e}")
        except ValueError as e:
            logging.error(f"Error parsing JSON response for ID {variable_id}: {e}")

        return None


File: src/infrastructure/persistence/portfolio_repository.py
---
Content:
import os
import pandas as pd
import config
from src.domain.portfolio import Portfolio


class PortfolioRepository:
    """Manages loading and saving all portfolio data."""

    def _load_csv(self, file_path: str, parse_dates: list = None) -> pd.DataFrame:
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            return pd.read_csv(file_path, parse_dates=parse_dates)
        return pd.DataFrame()

    def load_full_portfolio(self) -> Portfolio:
        """Loads all data files and instantiates the Portfolio domain object."""
        open_positions = self._load_csv(
            config.OPEN_POSITIONS_FILE, ["purchase_date", "expiration_date"]
        )
        closed_trades = self._load_csv(
            config.CLOSED_TRADES_FILE, ["buy_date", "sell_date"]
        )
        dolar_mep = self._load_csv(config.DOLAR_MEP_FILE, ["date"])
        dolar_ccl = self._load_csv(config.DOLAR_CCL_FILE, ["date"])
        cpi_arg = self._load_csv(config.CPI_ARG_FILE, ["date"])
        cpi_usa = self._load_csv(config.CPI_USA_FILE, ["date"])

        return Portfolio(
            open_positions, closed_trades, dolar_mep, dolar_ccl, cpi_arg, cpi_usa
        )

    def save_open_positions(self, open_positions_df: pd.DataFrame):
        """Saves the open positions DataFrame to its CSV file."""
        open_positions_df.to_csv(config.OPEN_POSITIONS_FILE, index=False)

    def save_closed_trades(self, closed_trades_df: pd.DataFrame):
        """Saves the closed trades DataFrame to its CSV file."""
        closed_trades_df.to_csv(config.CLOSED_TRADES_FILE, index=False)


File: src/infrastructure/data_fetcher.py
---
Content:
import pandas as pd
import logging
import requests
import os

import config
from gateways.data912_connector import Data912APIConnector
from gateways.bcra_gateway import BCRAAPIConnector
from gateways.alpha_vantage_gateway import AlphaVantageAPIConnector
from gateways.ambito_gateway import AmbitoGateway

logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
requests.packages.urllib3.disable_warnings(
    requests.packages.urllib3.exceptions.InsecureRequestWarning
)

def _read_existing_data(file_path: str) -> tuple[pd.DataFrame, set]:
    """Reads a CSV file and returns its data and a set of existing dates."""
    try:
        if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
            df = pd.read_csv(file_path)
            df["date"] = pd.to_datetime(df["date"]).dt.normalize()
            return df, set(df["date"])
    except (FileNotFoundError, pd.errors.EmptyDataError, Exception) as e:
        logging.warning(
            f"Could not read {file_path}, a new one will be created. Error: {e}"
        )
    return pd.DataFrame(columns=["date", "value"]), set()


def _prepare_new_records(
    api_data: list, existing_dates: set, date_key: str, value_key: str
) -> list:
    """Filters API data to find records not present in existing dates."""
    new_records = []
    if not api_data:
        return []
    for record in api_data:
        try:
            record_date = pd.to_datetime(record.get(date_key)).normalize()
            if record_date not in existing_dates:
                value = float(str(record[value_key]).replace(",", "."))
                new_records.append({"date": record_date, "value": value})
        except (ValueError, TypeError, KeyError) as e:
            logging.debug(
                f"Skipping record due to format or key error: {record} - Error: {e}"
            )
            continue
    return new_records


def update_csv_from_api(file_path: str, api_data: list, date_key: str, value_key: str):
    """Updates a CSV file with new data from an API."""
    if api_data is None:
        logging.warning(f"No API data received to update {file_path}. Skipping.")
        return
    df, existing_dates = _read_existing_data(file_path)
    new_records = _prepare_new_records(api_data, existing_dates, date_key, value_key)
    if new_records:
        new_df = pd.DataFrame(new_records)
        combined_df = pd.concat([df, new_df], ignore_index=True)
        combined_df.sort_values(by="date", inplace=True)
        combined_df.to_csv(file_path, index=False, date_format="%Y-%m-%d")
        logging.info(f"Added {len(new_records)} new records to {file_path}.")
    else:
        logging.info(f"No new data to add to {file_path}.")


def update_historical_asset(asset_type: str, ticker: str):
    logging.info(f"Checking for updates for {asset_type.upper()}: {ticker}...")

    connector = Data912APIConnector()
    api_data = None

    asset_type_lower = asset_type.lower()
    if asset_type_lower == "stock":
        api_data = connector.get_historical_stock(ticker)
    elif asset_type_lower == "cedear":
        api_data = connector.get_historical_cedear(ticker)
    elif asset_type_lower == "bond":
        api_data = connector.get_historical_bond(ticker)
    else:
        logging.error(f"Unknown asset type for historical data: {asset_type}")
        return

    file_path = os.path.join(
        config.DATA_DIR, f"historical_{asset_type_lower}_{ticker}.csv"
    )
    update_csv_from_api(file_path, api_data, date_key="date", value_key="c")


def update_cpi_argentina():
    """Updates Argentina CPI file from BCRA."""
    logging.info("Checking for Argentina CPI updates...")
    connector = BCRAAPIConnector()
    api_data = connector.get_series_data(variable_id=28)
    update_csv_from_api(
        config.CPI_ARG_FILE, api_data, date_key="fecha", value_key="valor"
    )


def update_cpi_usa():
    """Updates USA CPI file from AlphaVantage."""
    logging.info("Checking for USA CPI updates...")
    connector = AlphaVantageAPIConnector()
    api_data = connector.get_cpi_data()
    update_csv_from_api(
        config.CPI_USA_FILE, api_data, date_key="date", value_key="value"
    )


def update_dolar_mep():
    """Updates Dolar MEP history from Ambito."""
    logging.info("Checking for Dolar MEP updates...")
    gateway = AmbitoGateway()
    api_data = gateway.get_dolar_mep_historical()
    update_csv_from_api(
        config.DOLAR_MEP_FILE, api_data, date_key="fecha", value_key="valor"
    )


def update_dolar_ccl():
    """Updates Dolar CCL history from Ambito."""
    logging.info("Checking for Dolar CCL updates...")
    gateway = AmbitoGateway()
    api_data = gateway.get_dolar_ccl_historical()
    update_csv_from_api(
        config.DOLAR_CCL_FILE, api_data, date_key="fecha", value_key="valor"
    )


File: src/shared/financial_utils.py
---
Content:
import pandas as pd


def _get_cpi_value_for_date(
    target_date: pd.Timestamp, cpi_df: pd.DataFrame
) -> float | None:
    """Finds the nearest CPI value for a single date."""
    if cpi_df.empty or pd.isna(target_date):
        return None

    lookup_df = pd.DataFrame({"date": [target_date]})
    merged = pd.merge_asof(
        lookup_df, cpi_df.sort_values("date"), on="date", direction="nearest"
    )

    if merged.empty or pd.isna(merged["value"].iloc[0]):
        return None
    return merged["value"].iloc[0]


def calculate_inflation_period(start_date, end_date, cpi_df: pd.DataFrame) -> float:
    """Calculates cumulative inflation between two dates using a CPI DataFrame."""
    start_val = _get_cpi_value_for_date(pd.to_datetime(start_date), cpi_df)
    end_val = _get_cpi_value_for_date(pd.to_datetime(end_date), cpi_df)

    if start_val is None or end_val is None or start_val == 0:
        return 0.0

    return (end_val / start_val) - 1.0


File: requirements.txt
---
Content:
pandas
flask
matplotlib
numpy
ppi_client
codebase-dump


File: run_cli.py
---
Content:
from src.application.report_orchestrator import ReportOrchestrator

if __name__ == "__main__":
    orchestrator = ReportOrchestrator()
    orchestrator.generate_and_display_report()


File: run_api.py
---
Content:
"""
Entry point for running the Flask Web API.
"""
from src.presentation.api import app

if __name__ == "__main__":
    print("Starting Portfolio Tracker API on http://127.0.0.1:5001")
    app.run(host='0.0.0.0', port=5001, debug=True)


File: utils.py
---
Content:
import re


def map_instrument_to_asset_type(instrument: dict) -> str:
    """Maps a broker's instrument data to a standard asset type."""
    if not instrument:
        return "UNKNOWN"

    instrument_type = instrument.get("type", "").upper()
    op_type = instrument.get("instrumentOperationType", "").upper()

    if op_type == "OPTION":
        return "OPCION"
    if instrument_type == "CEDEAR":
        return "CEDEAR"
    if instrument_type in ["MERVAL", "GENERAL", "LIDER", "PRIVATE_TITLE"]:
        return "ACCION"
    if instrument_type in ["BOND", "LETTER", "PUBLIC_TITLE"]:
        return "RF"
    if op_type == "PUBLIC_TITLE":
        return "RF"
    if op_type == "PRIVATE_TITLE":
        return "ACCION"

    return "UNKNOWN"


def parse_option_details(gallo_name: str) -> dict:
    """Parses option contract details from its name string."""
    if not gallo_name:
        return {}

    cleaned_name = gallo_name.replace(".", "")
    match = re.match(r"([A-Z0-9]+)\s*\((C|V)\)\s*([\d,\.]+)", cleaned_name)

    if not match:
        return {}

    return {
        "underlying_asset": match.group(1),
        "option_type": "CALL" if match.group(2) == "C" else "PUT",
        "strike_price": float(match.group(3).replace(",", ".")),
    }


File: config.py
---
Content:
import os

DATA_DIR = "data"

if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)

OPEN_POSITIONS_FILE = os.path.join(DATA_DIR, "open_positions.csv")
CLOSED_TRADES_FILE = os.path.join(DATA_DIR, "closed_trades.csv")
EXCHANGE_RATES_FILE = os.path.join(DATA_DIR, "exchange_rates.csv")
CPI_ARG_FILE = os.path.join(DATA_DIR, "cpi_argentina.csv")
CPI_USA_FILE = os.path.join(DATA_DIR, "cpi_usa.csv")
DOLAR_CCL_FILE = os.path.join(DATA_DIR, "dolar_ccl.csv")
DOLAR_MEP_FILE = os.path.join(DATA_DIR, "dolar_mep.csv")
RETAIL_DOLAR_FILE = os.path.join(DATA_DIR, "retail_dolar.csv")

TRANSACTIONS_FILE = "transactions.json"

AMBITO_BASE_URL = "https://mercados.ambito.com"
AMBITO_DOLAR_CCL_ENDPOINT = "dolarrava/cl"
AMBITO_DOLAR_MEP_ENDPOINT = "dolarrava/mep"
DATA912_API_URL = "https://data912.com"


